{"version":3,"sources":["../src/SchemaBuilder.js"],"names":["GraphQLSchema","graphql","debug","INDENT","SchemaBuilder","EventEmitter","constructor","options","Error","_busy","_watching","watchers","unwatchers","depth","hooks","build","inflection","init","finalize","GraphQLObjectType","GraphQLInputObjectType","GraphQLEnumType","GraphQLUnionType","GraphQLInterfaceType","_setPluginName","name","_currentPluginName","hook","hookName","fn","provides","before","after","displayName","length","join","push","relevantHooks","minIndex","minReason","maxIndex","maxReason","newProvides","newBefore","newAfter","describe","index","check","setMin","newMin","reason","setMax","newMax","forEach","oldHook","idx","oldProvides","oldBefore","oldAfter","some","dep","includes","splice","applyHooks","input","context","debugStr","repeat","newObj","hookDisplayName","previousHookName","status","currentHookName","previousHookEvent","currentHookEvent","oldObj","console","warn","Object","assign","registerWatcher","listen","unlisten","createBuild","initialBuild","scope","keys","filter","key","freeze","buildSchema","_generatedSchema","schema","newWithHooks","directives","specifiedDirectives","__origin","isSchema","hookedSchema","errors","validateSchema","map","e","message","replace","watchSchema","listener","_explicitSchemaListener","ignoreChangeTriggers","triggerChange","emit","error","on","unwatchSchema","e2","removeListener"],"mappings":"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","sourcesContent":["// @flow\nimport debugFactory from \"debug\";\nimport makeNewBuild from \"./makeNewBuild\";\nimport { bindAll } from \"./utils\";\nimport * as graphql from \"graphql\";\nimport type {\n  GraphQLType,\n  GraphQLNamedType,\n  GraphQLInterfaceType,\n  GraphQLObjectTypeConfig,\n} from \"graphql\";\nimport EventEmitter from \"events\";\n// TODO: when we move to TypeScript, change this to:\n// import { EventEmitter } from \"events\";\nimport type {\n  simplifyParsedResolveInfoFragmentWithType,\n  parseResolveInfo,\n} from \"graphql-parse-resolve-info\";\nimport type { GraphQLResolveInfo } from \"graphql/type/definition\";\nimport type resolveNode from \"./resolveNode\";\n\nimport type { FieldWithHooksFunction } from \"./makeNewBuild\";\nconst { GraphQLSchema } = graphql;\n\nconst debug = debugFactory(\"graphile-builder\");\n\nconst INDENT = \"  \";\n\nexport type Options = {\n  [string]: mixed,\n};\n\nexport type Plugin = (\n  builder: SchemaBuilder,\n  options: Options\n) => Promise<void> | void;\n\ntype TriggerChangeType = () => void;\n\nexport type DataForType = {\n  [string]: Array<mixed>,\n};\n\nexport type Build = {|\n  graphileBuildVersion: string,\n  graphql: *,\n  parseResolveInfo: parseResolveInfo,\n  simplifyParsedResolveInfoFragmentWithType: simplifyParsedResolveInfoFragmentWithType,\n  // DEPRECATED: getAliasFromResolveInfo: (resolveInfo: GraphQLResolveInfo) => string,\n  getSafeAliasFromResolveInfo: (resolveInfo: GraphQLResolveInfo) => string,\n  getSafeAliasFromAlias: (alias: string) => string,\n  resolveAlias(\n    data: {},\n    _args: mixed,\n    _context: mixed,\n    resolveInfo: GraphQLResolveInfo\n  ): string,\n  addType(type: GraphQLNamedType, origin?: ?string): void,\n  getTypeByName(typeName: string): ?GraphQLType,\n  extend<Obj1: *, Obj2: *>(base: Obj1, extra: Obj2, hint?: string): Obj1 & Obj2,\n  newWithHooks<T: GraphQLNamedType | GraphQLSchema, ConfigType: *>(\n    Class<T>,\n    spec: ConfigType,\n    scope: Scope,\n    performNonEmptyFieldsCheck?: boolean\n  ): ?T,\n  fieldDataGeneratorsByType: Map<*, *>, // @deprecated - use fieldDataGeneratorsByFieldNameByType instead\n  fieldDataGeneratorsByFieldNameByType: Map<*, *>,\n  fieldArgDataGeneratorsByFieldNameByType: Map<*, *>,\n  inflection: {\n    // eslint-disable-next-line flowtype/no-weak-types\n    [string]: (...args: Array<any>) => string,\n  },\n  wrapDescription: (\n    description: string,\n    position: \"root\" | \"type\" | \"field\" | \"arg\"\n  ) => string,\n  swallowError: (e: Error) => void,\n  // resolveNode: EXPERIMENTAL, API might change!\n  resolveNode: resolveNode,\n  status: {\n    currentHookName: ?string,\n    currentHookEvent: ?string,\n  },\n  scopeByType: Map<GraphQLType, Scope>,\n|};\n\nexport type BuildExtensionQuery = {|\n  $$isQuery: Symbol,\n|};\n\nexport type Scope = {\n  __origin: ?string,\n  [string]: mixed,\n};\n\nexport type Context = {|\n  scope: Scope,\n  type: string,\n  [string]: mixed,\n|};\n\ntype DataGeneratorFunction = () => {};\n\nexport type ContextGraphQLObjectTypeFields = {|\n  addDataGeneratorForField: (\n    fieldName: string,\n    fn: DataGeneratorFunction\n  ) => void,\n  recurseDataGeneratorsForField: (fieldName: string) => void, // @deprecated - DO NOT USE!\n  Self: GraphQLNamedType,\n  GraphQLObjectType: GraphQLObjectTypeConfig<*, *>,\n  fieldWithHooks: FieldWithHooksFunction,\n|};\n\ntype SupportedHookTypes = {} | Build | Array<GraphQLInterfaceType>;\n\nexport type Hook<\n  Type: SupportedHookTypes,\n  BuildExtensions: *,\n  ContextExtensions: *\n> = {\n  (\n    input: Type,\n    build: { ...Build, ...BuildExtensions },\n    context: { ...Context, ...ContextExtensions }\n  ): Type,\n  displayName?: string,\n  provides?: Array<string>,\n  before?: Array<string>,\n  after?: Array<string>,\n};\n\nexport type WatchUnwatch = (triggerChange: TriggerChangeType) => void;\n\nexport type SchemaListener = (newSchema: GraphQLSchema) => void;\n\nclass SchemaBuilder extends EventEmitter {\n  options: Options;\n  watchers: Array<WatchUnwatch>;\n  unwatchers: Array<WatchUnwatch>;\n  triggerChange: ?TriggerChangeType;\n  depth: number;\n  hooks: {\n    [string]: Array<Hook<*, *, *>>,\n  };\n\n  _currentPluginName: ?string;\n  _generatedSchema: ?GraphQLSchema;\n  _explicitSchemaListener: ?SchemaListener;\n  _busy: boolean;\n  _watching: boolean;\n\n  constructor(options: Options) {\n    super();\n\n    this.options = options;\n    if (!options) {\n      throw new Error(\"Please pass options to SchemaBuilder\");\n    }\n\n    this._busy = false;\n    this._watching = false;\n\n    this.watchers = [];\n    this.unwatchers = [];\n\n    // Because hooks can nest, this keeps track of how deep we are.\n    this.depth = -1;\n\n    this.hooks = {\n      // The build object represents the current schema build and is passed to\n      // all hooks, hook the 'build' event to extend this object:\n      build: [],\n\n      // Inflection is used for naming resulting types/fields/args/etc - it's\n      // hookable so that other plugins may extend it or override it\n      inflection: [],\n\n      // 'build' phase should not generate any GraphQL objects (because the\n      // build object isn't finalised yet so it risks weirdness occurring); so\n      // if you need to set up any global types you can do so here.\n      init: [],\n\n      // 'finalize' phase is called once the schema is built; typically you\n      // shouldn't use this, but it's useful for interfacing with external\n      // libraries that mutate an already constructed schema.\n      finalize: [],\n\n      // Add 'query', 'mutation' or 'subscription' types in this hook:\n      GraphQLSchema: [],\n\n      // When creating a GraphQLObjectType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLObjectType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLObjectType:interfaces' to add additional interfaces to this object type\n      // - 'GraphQLObjectType:fields' to add additional fields to this object type (is\n      //   ran asynchronously and gets a reference to the final GraphQL Object as\n      //   `Self` in the context)\n      // - 'GraphQLObjectType:fields:field' to customise an individual field from above\n      // - 'GraphQLObjectType:fields:field:args' to customize the arguments to a field\n      GraphQLObjectType: [],\n      \"GraphQLObjectType:interfaces\": [],\n      \"GraphQLObjectType:fields\": [],\n      \"GraphQLObjectType:fields:field\": [],\n      \"GraphQLObjectType:fields:field:args\": [],\n\n      // When creating a GraphQLInputObjectType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLInputObjectType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLInputObjectType:fields' to add additional fields to this object type (is\n      //   ran asynchronously and gets a reference to the final GraphQL Object as\n      //   `Self` in the context)\n      // - 'GraphQLInputObjectType:fields:field' to customise an individual field from above\n      GraphQLInputObjectType: [],\n      \"GraphQLInputObjectType:fields\": [],\n      \"GraphQLInputObjectType:fields:field\": [],\n\n      // When creating a GraphQLEnumType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLEnumType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLEnumType:values' to add additional values\n      // - 'GraphQLEnumType:values:value' to change an individual value\n      GraphQLEnumType: [],\n      \"GraphQLEnumType:values\": [],\n      \"GraphQLEnumType:values:value\": [],\n\n      // When creating a GraphQLUnionType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLUnionType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLUnionType:types' to add additional types to this union\n      GraphQLUnionType: [],\n      \"GraphQLUnionType:types\": [],\n\n      // When creating a GraphQLInterfaceType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLInterfaceType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLInterfaceType:fields' to add additional fields to this interface type (is\n      //   ran asynchronously and gets a reference to the final GraphQL Interface as\n      //   `Self` in the context)\n      // - 'GraphQLInterfaceType:fields:field' to customise an individual field from above\n      // - 'GraphQLInterfaceType:fields:field:args' to customize the arguments to a field\n      GraphQLInterfaceType: [],\n      \"GraphQLInterfaceType:fields\": [],\n      \"GraphQLInterfaceType:fields:field\": [],\n      \"GraphQLInterfaceType:fields:field:args\": [],\n    };\n  }\n\n  _setPluginName(name: ?string) {\n    this._currentPluginName = name;\n  }\n\n  /*\n   * Every hook `fn` takes three arguments:\n   * - obj - the object currently being inspected\n   * - build - the current build object (which contains a number of utilities and the context of the build)\n   * - context - information specific to the current invocation of the hook\n   *\n   * The function must either return a replacement object for `obj` or `obj` itself\n   */\n  hook<T: *>(\n    hookName: string,\n    fn: Hook<T, *, *>,\n    provides?: Array<string>,\n    before?: Array<string>,\n    after?: Array<string>\n  ) {\n    if (!this.hooks[hookName]) {\n      throw new Error(`Sorry, '${hookName}' is not a supported hook`);\n    }\n    if (this._currentPluginName) {\n      fn.displayName = `${this._currentPluginName}/${hookName}/${\n        (provides && provides.length && provides.join(\"+\")) ||\n        fn.displayName ||\n        fn.name ||\n        \"unnamed\"\n      }`;\n    }\n    if (provides) {\n      if (!fn.displayName && provides.length) {\n        fn.displayName = `unknown/${hookName}/${provides[0]}`;\n      }\n      fn.provides = provides;\n    }\n    if (before) {\n      fn.before = before;\n    }\n    if (after) {\n      fn.after = after;\n    }\n    if (!fn.provides && !fn.before && !fn.after) {\n      // No explicit dependencies - add to the end\n      this.hooks[hookName].push(fn);\n    } else {\n      // We need to figure out where it can go, respecting all the dependencies.\n      // TODO: I think there are situations in which this algorithm may result in unnecessary conflict errors; we should take a more iterative approach or find a better algorithm\n      const relevantHooks = this.hooks[hookName];\n      let minIndex = 0;\n      let minReason = null;\n      let maxIndex = relevantHooks.length;\n      let maxReason = null;\n      const { provides: newProvides, before: newBefore, after: newAfter } = fn;\n      const describe = (hook, index) => {\n        if (!hook) {\n          return \"-\";\n        }\n        return `${hook.displayName || hook.name || \"anonymous\"} (${\n          index ? `index: ${index}, ` : \"\"\n        }provides: ${hook.provides ? hook.provides.join(\",\") : \"-\"}, before: ${\n          hook.before ? hook.before.join(\",\") : \"-\"\n        }, after: ${hook.after ? hook.after.join(\",\") : \"-\"})`;\n      };\n      const check = () => {\n        if (minIndex > maxIndex) {\n          throw new Error(\n            `Cannot resolve plugin order - ${describe(\n              fn\n            )} cannot be before ${describe(\n              maxReason,\n              maxIndex\n            )} and after ${describe(\n              minReason,\n              minIndex\n            )} - please report this issue`\n          );\n        }\n      };\n      const setMin = (newMin, reason) => {\n        if (newMin > minIndex) {\n          minIndex = newMin;\n          minReason = reason;\n          check();\n        }\n      };\n      const setMax = (newMax, reason) => {\n        if (newMax < maxIndex) {\n          maxIndex = newMax;\n          maxReason = reason;\n          check();\n        }\n      };\n      relevantHooks.forEach((oldHook, idx) => {\n        const {\n          provides: oldProvides,\n          before: oldBefore,\n          after: oldAfter,\n        } = oldHook;\n        if (newProvides) {\n          if (oldBefore && oldBefore.some(dep => newProvides.includes(dep))) {\n            // Old says it has to come before new\n            setMin(idx + 1, oldHook);\n          }\n          if (oldAfter && oldAfter.some(dep => newProvides.includes(dep))) {\n            // Old says it has to be after new\n            setMax(idx, oldHook);\n          }\n        }\n        if (oldProvides) {\n          if (newBefore && newBefore.some(dep => oldProvides.includes(dep))) {\n            // New says it has to come before old\n            setMax(idx, oldHook);\n          }\n          if (newAfter && newAfter.some(dep => oldProvides.includes(dep))) {\n            // New says it has to be after old\n            setMin(idx + 1, oldHook);\n          }\n        }\n      });\n\n      // We've already validated everything, so we can now insert the record.\n      this.hooks[hookName].splice(maxIndex, 0, fn);\n    }\n  }\n\n  applyHooks<T: *, Context>(\n    build: { ...Build },\n    hookName: string,\n    input: T,\n    context: Context,\n    debugStr: string = \"\"\n  ): T {\n    if (!input) {\n      throw new Error(\"applyHooks was called with falsy input\");\n    }\n    this.depth++;\n    try {\n      debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]: Running...`);\n\n      const hooks: Array<Hook<T, *, *>> = this.hooks[hookName];\n      if (!hooks) {\n        throw new Error(`Sorry, '${hookName}' is not a registered hook`);\n      }\n\n      let newObj = input;\n      for (const hook: Hook<T, *, *> of hooks) {\n        this.depth++;\n        try {\n          const hookDisplayName = hook.displayName || hook.name || \"anonymous\";\n          debug(\n            `${INDENT.repeat(\n              this.depth\n            )}[${hookName}${debugStr}]:   Executing '${hookDisplayName}'`\n          );\n\n          const previousHookName = build.status.currentHookName;\n          const previousHookEvent = build.status.currentHookEvent;\n          build.status.currentHookName = hookDisplayName;\n          build.status.currentHookEvent = hookName;\n          const oldObj = newObj;\n          newObj = hook(newObj, build, context);\n          if (hookName === \"build\") {\n            /*\n             * Unlike all the other hooks, the `build` hook must always use the\n             * same `build` object - never returning a new object for fear of\n             * causing issues to other build hooks that reference the old\n             * object and don't get the new additions.\n             */\n            if (newObj !== oldObj) {\n              // TODO:v5: forbid this\n              // eslint-disable-next-line no-console\n              console.warn(\n                `Build hook '${hookDisplayName}' returned a new object; please use 'return build.extend(build, {...})' instead.`\n              );\n              // Copy everything from newObj back to oldObj\n              Object.assign(oldObj, newObj);\n              // Go back to the old objectect\n              newObj = oldObj;\n            }\n          }\n          build.status.currentHookName = previousHookName;\n          build.status.currentHookEvent = previousHookEvent;\n\n          if (!newObj) {\n            throw new Error(\n              `Hook '${\n                hook.displayName || hook.name || \"anonymous\"\n              }' for '${hookName}' returned falsy value '${newObj}'`\n            );\n          }\n          debug(\n            `${INDENT.repeat(\n              this.depth\n            )}[${hookName}${debugStr}]:   '${hookDisplayName}' complete`\n          );\n        } finally {\n          this.depth--;\n        }\n      }\n\n      debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]: Complete`);\n\n      return newObj;\n    } finally {\n      this.depth--;\n    }\n  }\n\n  registerWatcher(listen: WatchUnwatch, unlisten: WatchUnwatch) {\n    if (!listen || !unlisten) {\n      throw new Error(\"You must provide both a listener and an unlistener\");\n    }\n    this.watchers.push(listen);\n    this.unwatchers.push(unlisten);\n  }\n\n  createBuild(): { ...Build } {\n    const initialBuild = makeNewBuild(this);\n    // Inflection needs to come first, in case 'build' hooks depend on it\n    initialBuild.inflection = this.applyHooks(\n      initialBuild,\n      \"inflection\",\n      initialBuild.inflection,\n      {\n        scope: {},\n      }\n    );\n    const build = this.applyHooks(initialBuild, \"build\", initialBuild, {\n      scope: {},\n    });\n    // Bind all functions so they can be dereferenced\n    bindAll(\n      build,\n      Object.keys(build).filter(key => typeof build[key] === \"function\")\n    );\n    Object.freeze(build);\n    this.applyHooks(build, \"init\", {}, { scope: {} });\n    return build;\n  }\n\n  buildSchema(): GraphQLSchema {\n    if (!this._generatedSchema) {\n      const build = this.createBuild();\n      const schema = build.newWithHooks(\n        GraphQLSchema,\n        {\n          directives: [...build.graphql.specifiedDirectives],\n        },\n        {\n          __origin: `GraphQL built-in`,\n          isSchema: true,\n        }\n      );\n      const hookedSchema = this.applyHooks(\n        build,\n        \"finalize\",\n        schema,\n        {},\n        \"Finalising GraphQL schema\"\n      );\n      const errors = build.graphql.validateSchema(hookedSchema);\n      if (errors && errors.length) {\n        throw new Error(\n          \"GraphQL schema is invalid:\\n\" +\n            errors.map(e => `- ` + e.message.replace(/\\n/g, \"\\n  \")).join(\"\\n\")\n        );\n      }\n      this._generatedSchema = hookedSchema;\n    }\n    if (!this._generatedSchema) {\n      throw new Error(\"Schema generation failed\");\n    }\n    return this._generatedSchema;\n  }\n\n  async watchSchema(listener?: SchemaListener) {\n    if (this._busy) {\n      throw new Error(\"An operation is in progress\");\n    }\n    if (this._watching) {\n      throw new Error(\n        \"We're already watching this schema! Use `builder.on('schema', callback)` instead.\"\n      );\n    }\n    try {\n      this._busy = true;\n      this._explicitSchemaListener = listener;\n\n      // We want to ignore `triggerChange` calls that occur whilst we're setting\n      // up the listeners to prevent an unnecessary double schema build.\n      let ignoreChangeTriggers = true;\n\n      this.triggerChange = () => {\n        if (ignoreChangeTriggers) {\n          return;\n        }\n        this._generatedSchema = null;\n        // XXX: optionally debounce\n        try {\n          const schema = this.buildSchema();\n          this.emit(\"schema\", schema);\n        } catch (e) {\n          // Build errors introduced while watching are ignored because it's\n          // primarily used in development.\n          // eslint-disable-next-line no-console\n          console.error(\n            \"⚠️⚠️⚠️ An error occured when building the schema on watch:\"\n          );\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n      };\n      try {\n        this._watching = true;\n        for (const fn of this.watchers) {\n          await fn(this.triggerChange);\n        }\n\n        // Now we're about to build the first schema, any further\n        // `triggerChange` calls should be honoured.\n        ignoreChangeTriggers = false;\n\n        if (listener) {\n          this.on(\"schema\", listener);\n        }\n        this.emit(\"schema\", this.buildSchema());\n      } catch (e) {\n        try {\n          this._busy = false;\n          // Abort abort!\n          await this.unwatchSchema();\n        } catch (e2) {\n          console.error(\n            `Error when unwatching schema after error during schema build: ${e}`\n          );\n        }\n        throw e;\n      }\n    } finally {\n      this._busy = false;\n    }\n  }\n\n  async unwatchSchema() {\n    if (this._busy) {\n      throw new Error(\"An operation is in progress\");\n    }\n    if (!this._watching) {\n      throw new Error(\"We're not watching this schema!\");\n    }\n    this._busy = true;\n    try {\n      const listener = this._explicitSchemaListener;\n      this._explicitSchemaListener = null;\n      if (listener) {\n        this.removeListener(\"schema\", listener);\n      }\n      if (this.triggerChange) {\n        for (const fn of this.unwatchers) {\n          await fn(this.triggerChange);\n        }\n      }\n      this.triggerChange = null;\n      this._watching = false;\n    } finally {\n      this._busy = false;\n    }\n  }\n}\n\nexport default SchemaBuilder;\n"],"file":"SchemaBuilder.js"}