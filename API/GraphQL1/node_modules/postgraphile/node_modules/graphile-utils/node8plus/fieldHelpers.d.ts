import type { GraphQLResolveInfo } from "graphql";
import type { Build, Context } from "graphile-build";
import type { QueryBuilder, SQL } from "graphile-build-pg";
export declare type SelectGraphQLResultFromTable = (tableFragment: SQL, builderCallback: (alias: SQL, sqlBuilder: QueryBuilder) => void) => Promise<any>;
export interface GraphileHelpers<TSource> {
    build: Build;
    fieldContext: Context<TSource>;
    selectGraphQLResultFromTable: SelectGraphQLResultFromTable;
}
export declare function makeFieldHelpers<TSource>(build: Build, fieldContext: Context<TSource>, context: any, resolveInfo: GraphQLResolveInfo): GraphileHelpers<TSource>;
export declare function requireColumn<Type>(build: Build, context: Context<Type>, method: "addArgDataGenerator" | "addDataGenerator", col: string, alias: string): void;
export declare function requireChildColumn<Type>(build: Build, context: Context<Type>, col: string, alias: string): void;
export declare function requireSiblingColumn<Type>(build: Build, context: Context<Type>, col: string, alias: string): void;
