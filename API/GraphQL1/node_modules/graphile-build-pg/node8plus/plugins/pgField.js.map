{"version":3,"sources":["../../src/plugins/pgField.js"],"names":["pgField","build","fieldWithHooks","fieldName","fieldSpecGenerator","fieldScope","whereFrom","options","pgSql","sql","pgQueryFromResolveData","queryFromResolveData","getSafeAliasFromAlias","getSafeAliasFromResolveInfo","pgTweakFragmentForTypeAndModifier","fieldContext","fieldSpec","type","FieldType","nullableType","graphql","getNullableType","namedType","getNamedType","isListType","constructor","GraphQLList","isLeafType","pgType","Error","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","resolveData","hoistCursor","usesCursor","length","pgQuery","queryBuilder","select","tableAlias","getTableAlias","identifier","Symbol","query","pgTypeModifier","onlyJsonField","asJson","innerQueryBuilder","parentQueryBuilder","withQueryBuilder","context","rootValue","fragment","resolve","data","_args","_context","resolveInfo","map","d"],"mappings":"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","sourcesContent":["export default function pgField(\n  build,\n  fieldWithHooks,\n  fieldName,\n  fieldSpecGenerator,\n  fieldScope = {},\n  whereFrom = false,\n  options = {}\n) {\n  const {\n    pgSql: sql,\n    pgQueryFromResolveData: queryFromResolveData,\n    getSafeAliasFromAlias,\n    getSafeAliasFromResolveInfo,\n    pgTweakFragmentForTypeAndModifier,\n  } = build;\n  return fieldWithHooks(\n    fieldName,\n    fieldContext => {\n      const fieldSpec =\n        typeof fieldSpecGenerator === \"function\"\n          ? fieldSpecGenerator(fieldContext)\n          : fieldSpecGenerator;\n      const { type: FieldType } = fieldSpec;\n      const nullableType = build.graphql.getNullableType(FieldType);\n      const namedType = build.graphql.getNamedType(FieldType);\n      const isListType =\n        nullableType !== namedType &&\n        nullableType.constructor === build.graphql.GraphQLList;\n      const isLeafType = build.graphql.isLeafType(FieldType);\n      if (isLeafType && !options.pgType) {\n        // eslint-disable-next-line no-console\n        throw new Error(\n          \"pgField call omits options.pgType for a leaf type; certain tweaks may not be applied!\"\n        );\n      }\n      const { getDataFromParsedResolveInfoFragment, addDataGenerator } =\n        fieldContext;\n      addDataGenerator(parsedResolveInfoFragment => {\n        const safeAlias = getSafeAliasFromAlias(\n          parsedResolveInfoFragment.alias\n        );\n        const resolveData = getDataFromParsedResolveInfoFragment(\n          parsedResolveInfoFragment,\n          FieldType\n        );\n        return {\n          ...(options.hoistCursor &&\n          resolveData.usesCursor &&\n          resolveData.usesCursor.length\n            ? { usesCursor: [true] }\n            : null),\n          pgQuery: queryBuilder => {\n            queryBuilder.select(() => {\n              const tableAlias =\n                whereFrom === false\n                  ? queryBuilder.getTableAlias()\n                  : sql.identifier(Symbol());\n              const query = queryFromResolveData(\n                whereFrom ? whereFrom(queryBuilder) : sql.identifier(Symbol()),\n                isLeafType && options.pgType\n                  ? pgTweakFragmentForTypeAndModifier(\n                      tableAlias,\n                      options.pgType,\n                      options.pgTypeModifier,\n                      {}\n                    )\n                  : tableAlias,\n                resolveData,\n                whereFrom === false\n                  ? { onlyJsonField: true }\n                  : { asJson: true },\n                innerQueryBuilder => {\n                  innerQueryBuilder.parentQueryBuilder = queryBuilder;\n                  if (typeof options.withQueryBuilder === \"function\") {\n                    options.withQueryBuilder(innerQueryBuilder, {\n                      parsedResolveInfoFragment,\n                    });\n                  }\n                },\n                queryBuilder.context,\n                queryBuilder.rootValue\n              );\n              return sql.fragment`(${query})`;\n            }, safeAlias);\n          },\n        };\n      });\n\n      return {\n        resolve(data, _args, _context, resolveInfo) {\n          const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n          if (data.data == null) return null;\n          if (isListType) {\n            return data.data.map(d => (d != null ? d[safeAlias] : null));\n          } else {\n            return data.data[safeAlias];\n          }\n        },\n        ...fieldSpec,\n      };\n    },\n    fieldScope\n  );\n}\n"],"file":"pgField.js"}