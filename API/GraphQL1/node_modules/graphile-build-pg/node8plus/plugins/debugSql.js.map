{"version":3,"sources":["../../src/plugins/debugSql.js"],"names":["formatSQLForDebugging","sql","colourIndex","allowedColours","chalk","red","green","yellow","blue","magenta","cyan","white","black","nextColor","length","colours","colourize","str","bold","call","indentLevel","handleIndent","all","rawMatch","match","replace","repeat","tidySql","gray","colouredSql","rawDebugSql","debugSql","enabled","Object","assign"],"mappings":"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","sourcesContent":["import debugFactory from \"debug\";\nimport chalk from \"chalk\";\n\nexport function formatSQLForDebugging(sql) {\n  let colourIndex = 0;\n  const allowedColours = [\n    chalk.red,\n    chalk.green,\n    chalk.yellow,\n    chalk.blue,\n    chalk.magenta,\n    chalk.cyan,\n    chalk.white,\n    chalk.black,\n  ];\n  function nextColor() {\n    colourIndex = (colourIndex + 1) % allowedColours.length;\n    return allowedColours[colourIndex];\n  }\n  const colours = {};\n\n  /* Yep - that's `colour` from English and `ize` from American */\n  function colourize(str) {\n    if (!colours[str]) {\n      colours[str] = nextColor();\n    }\n    return colours[str].bold.call(null, str);\n  }\n\n  let indentLevel = 0;\n  function handleIndent(all, rawMatch) {\n    const match = rawMatch.replace(/ $/, \"\");\n    if (match === \"(\") {\n      indentLevel++;\n      return match + \"\\n\" + \"  \".repeat(indentLevel);\n    } else if (match === \")\") {\n      indentLevel--;\n      return \"\\n\" + \"  \".repeat(indentLevel) + match;\n    } else if (match === \"),\") {\n      indentLevel--;\n      return (\n        \"\\n\" +\n        \"  \".repeat(indentLevel) +\n        match +\n        \"\\n\" +\n        \"  \".repeat(indentLevel)\n      );\n    } else if (match === \",\") {\n      return match + \"\\n\" + \"  \".repeat(indentLevel);\n    } else {\n      return \"\\n\" + \"  \".repeat(indentLevel) + match.replace(/^\\s+/, \"\");\n    }\n  }\n  const tidySql = sql\n    .replace(/\\s+/g, \" \")\n    .replace(/\\s+(?=$|\\n|\\))/g, \"\")\n    .replace(/(\\n|^|\\()\\s+/g, \"$1\")\n    .replace(\n      /(\\(|\\)|\\), ?|, ?| (select|insert|update|delete|from|where|and|or|order|limit)(?= ))/g,\n      handleIndent\n    )\n    .replace(/\\(\\s*([A-Za-z0-9_.\"' =]{1,50})\\s*\\)/g, \"($1)\")\n    .replace(/\\(\\s*(\\([A-Za-z0-9_.\"' =]{1,50}\\))\\s*\\)/g, \"($1)\")\n    .replace(/\\n\\s*and \\(TRUE\\)/g, chalk.gray(\" and (TRUE)\"));\n  const colouredSql = tidySql.replace(/__local_[0-9]+__/g, colourize);\n  return colouredSql;\n}\n\nconst rawDebugSql = debugFactory(\"graphile-build-pg:sql\");\n\nfunction debugSql(sql) {\n  if (!rawDebugSql.enabled) {\n    return;\n  }\n  rawDebugSql(\"%s\", \"\\n\" + formatSQLForDebugging(sql));\n}\nObject.assign(debugSql, rawDebugSql);\n\nexport default debugSql;\n"],"file":"debugSql.js"}