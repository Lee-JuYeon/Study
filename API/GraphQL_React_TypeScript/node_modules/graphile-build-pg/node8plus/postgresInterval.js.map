{"version":3,"sources":["../src/postgresInterval.js"],"names":["NUMBER","YEAR","MONTH","DAY","TIME","INTERVAL","RegExp","map","str","join","parseInterval","interval","years","months","days","plusMinusTime","hours","minutes","seconds","exec","timeMultiplier","parseInt","parseFloat"],"mappings":";;;;;;AAWA;AACA;AACA;AAEA,MAAMA,MAAM,GAAG,aAAf;AACA,MAAMC,IAAI,GAAI,GAAED,MAAO,YAAvB;AACA,MAAME,KAAK,GAAI,GAAEF,MAAO,WAAxB;AACA,MAAMG,GAAG,GAAI,GAAEH,MAAO,WAAtB,C,CACA;AACA;AACA;AACA;;AACA,MAAMI,IAAI,GAAG,iDAAb;AAEA,MAAMC,QAAQ,GAAG,IAAIC,MAAJ,CACf,MACE;AACA,CAACL,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBG,GAAzB,CAA6BC,GAAG,IAAI,QAAQA,GAAR,GAAc,IAAlD,EAAwDC,IAAxD,CAA6D,MAA7D,CAFF,GAGE,GAJa,CAAjB;;AAOO,SAASC,aAAT,CAAuBC,QAAvB,EAAmD;AACxD,QAAM,GAAGC,KAAH,EAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,aAAxB,EAAuCC,KAAvC,EAA8CC,OAA9C,EAAuDC,OAAvD,IACJb,QAAQ,CAACc,IAAT,CAAcR,QAAQ,IAAI,EAA1B,KAAiC,EADnC;AAGA,QAAMS,cAAc,GAAGL,aAAa,KAAK,GAAlB,GAAwB,CAAC,CAAzB,GAA6B,CAApD;AAEA,SAAO;AACLH,IAAAA,KAAK,EAAEA,KAAK,GAAGS,QAAQ,CAACT,KAAD,EAAQ,EAAR,CAAX,GAAyB,CADhC;AAELC,IAAAA,MAAM,EAAEA,MAAM,GAAGQ,QAAQ,CAACR,MAAD,EAAS,EAAT,CAAX,GAA0B,CAFnC;AAGLC,IAAAA,IAAI,EAAEA,IAAI,GAAGO,QAAQ,CAACP,IAAD,EAAO,EAAP,CAAX,GAAwB,CAH7B;AAILE,IAAAA,KAAK,EAAEA,KAAK,GAAGI,cAAc,GAAGC,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAA5B,GAA0C,CAJjD;AAKLC,IAAAA,OAAO,EAAEA,OAAO,GAAGG,cAAc,GAAGC,QAAQ,CAACJ,OAAD,EAAU,EAAV,CAA5B,GAA4C,CALvD;AAML;AACAC,IAAAA,OAAO,EAAEA,OAAO,GAAGE,cAAc,GAAGE,UAAU,CAACJ,OAAD,CAA9B,GAA0C;AAPrD,GAAP;AASD","sourcesContent":["// @flow\n\nexport type Interval = {\n  years: number,\n  months: number,\n  days: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n};\n\n// Regexp construction enhanced from `postgres-interval`, which is licensed\n// under the MIT license and is copyright (c) Ben Drucker <bvdrucker@gmail.com>\n// (bendrucker.me).\n\nconst NUMBER = \"([+-]?\\\\d+)\";\nconst YEAR = `${NUMBER}\\\\s+years?`;\nconst MONTH = `${NUMBER}\\\\s+mons?`;\nconst DAY = `${NUMBER}\\\\s+days?`;\n// NOTE: PostgreSQL automatically overflows seconds into minutes and minutes\n// into hours, so we can rely on minutes and seconds always being 2 digits\n// (plus decimal for seconds). The overflow stops at hours - hours do not\n// overflow into days, so could be arbitrarily long.\nconst TIME = \"([+-])?(\\\\d+):(\\\\d\\\\d):(\\\\d\\\\d(?:\\\\.\\\\d{1,6})?)\";\n\nconst INTERVAL = new RegExp(\n  \"^\" +\n    // All parts of an interval are optional\n    [YEAR, MONTH, DAY, TIME].map(str => \"(?:\" + str + \")?\").join(\"\\\\s*\") +\n    \"$\"\n);\n\nexport function parseInterval(interval: string): Interval {\n  const [, years, months, days, plusMinusTime, hours, minutes, seconds] =\n    INTERVAL.exec(interval || \"\") || [];\n\n  const timeMultiplier = plusMinusTime === \"-\" ? -1 : 1;\n\n  return {\n    years: years ? parseInt(years, 10) : 0,\n    months: months ? parseInt(months, 10) : 0,\n    days: days ? parseInt(days, 10) : 0,\n    hours: hours ? timeMultiplier * parseInt(hours, 10) : 0,\n    minutes: minutes ? timeMultiplier * parseInt(minutes, 10) : 0,\n    // Seconds can be decimal; all other values are integer\n    seconds: seconds ? timeMultiplier * parseFloat(seconds) : 0,\n  };\n}\n"],"file":"postgresInterval.js"}