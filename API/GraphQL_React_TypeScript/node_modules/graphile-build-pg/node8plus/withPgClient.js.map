{"version":3,"sources":["../src/withPgClient.js"],"names":["debug","constructorName","obj","constructor","name","quacksLikePgClient","pgConfig","connect","end","escapeLiteral","escapeIdentifier","quacksLikePgPool","Client","options","query","getPgClientAndReleaserFromConfig","process","env","DATABASE_URL","releasePgClient","pgClient","pg","release","Error","Pool","pgPool","undefined","on","e","Promise","resolve","reject","err","withPgClient","fn","errorHandler","console","error","message","removeListener"],"mappings":"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","sourcesContent":["// @flow\nimport pg from \"pg\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nfunction constructorName(obj) {\n  return obj && typeof obj.constructor === \"function\" && obj.constructor.name;\n}\n\n// Some duck-typing\n\nfunction quacksLikePgClient(pgConfig: mixed): boolean {\n  // A diagnosis of exclusion\n  if (!pgConfig || typeof pgConfig !== \"object\") return false;\n  if (constructorName(pgConfig) !== \"Client\") return false;\n  if (typeof pgConfig.connect !== \"function\") return false;\n  if (typeof pgConfig.end !== \"function\") return false;\n  if (typeof pgConfig.escapeLiteral !== \"function\") return false;\n  if (typeof pgConfig.escapeIdentifier !== \"function\") return false;\n  return true;\n}\n\nexport function quacksLikePgPool(pgConfig: mixed): boolean {\n  // A diagnosis of exclusion\n  if (!pgConfig || typeof pgConfig !== \"object\") return false;\n  if (\n    constructorName(pgConfig) !== \"Pool\" &&\n    constructorName(pgConfig) !== \"BoundPool\"\n  ) {\n    return false;\n  }\n  if (!pgConfig.Client) return false;\n  if (!pgConfig.options) return false;\n  if (typeof pgConfig.connect !== \"function\") return false;\n  if (typeof pgConfig.end !== \"function\") return false;\n  if (typeof pgConfig.query !== \"function\") return false;\n  return true;\n}\n\nexport const getPgClientAndReleaserFromConfig = async (\n  pgConfig: pg.Client | pg.Pool | string = process.env.DATABASE_URL\n) => {\n  let releasePgClient = () => {};\n  let pgClient: pg.Client;\n  if (pgConfig instanceof pg.Client || quacksLikePgClient(pgConfig)) {\n    pgClient = (pgConfig: pg.Client);\n    if (!pgClient.release) {\n      throw new Error(\n        \"We only support PG clients from a PG pool (because otherwise the `await` call can hang indefinitely if an error occurs and there's no error handler)\"\n      );\n    }\n  } else if (pgConfig instanceof pg.Pool || quacksLikePgPool(pgConfig)) {\n    const pgPool = (pgConfig: pg.Pool);\n    pgClient = await pgPool.connect();\n    releasePgClient = () => pgClient.release();\n  } else if (pgConfig === undefined || typeof pgConfig === \"string\") {\n    pgClient = new pg.Client(pgConfig);\n    pgClient.on(\"error\", e => {\n      debug(\"pgClient error occurred: %s\", e);\n    });\n    releasePgClient = () =>\n      new Promise<void>((resolve, reject) =>\n        pgClient.end(err => (err ? reject(err) : resolve()))\n      );\n    await new Promise((resolve, reject) =>\n      pgClient.connect(err => (err ? reject(err) : resolve()))\n    );\n  } else {\n    throw new Error(\n      \"You must provide either a pg.Pool or pg.Client instance or a PostgreSQL connection string.\"\n    );\n  }\n  return { pgClient, releasePgClient };\n};\n\nconst withPgClient = async (\n  pgConfig: pg.Client | pg.Pool | string | void,\n  fn: (pgClient: pg.Client) => *\n) => {\n  if (!fn) {\n    throw new Error(\"Nothing to do!\");\n  }\n  const { pgClient, releasePgClient } = await getPgClientAndReleaserFromConfig(\n    pgConfig\n  );\n  const errorHandler = e => {\n    // eslint-disable-next-line no-console\n    console.error(\"withPgClient client error:\", e.message);\n  };\n  pgClient.on(\"error\", errorHandler);\n  try {\n    return await fn(pgClient);\n  } finally {\n    pgClient.removeListener(\"error\", errorHandler);\n    try {\n      await releasePgClient();\n    } catch (e) {\n      // Failed to release, assuming success\n    }\n  }\n};\n\nexport default withPgClient;\n"],"file":"withPgClient.js"}