{"version":3,"sources":["../../src/plugins/PgMutationProceduresPlugin.js"],"names":["PgMutationProceduresPlugin","builder","hook","fields","build","context","extend","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","pgMakeProcField","makeProcField","pgOmit","omit","swallowError","describePgEntity","sqlCommentByAddingTags","scope","isRootMutation","fieldWithHooks","procedure","reduce","memo","proc","isStable","namespace","fieldName","functionMutationName","isMutation","name","e"],"mappings":";;;;;;;IAGyBA,0B,GAAT,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;AAC3DA,EAAAA,OAAO,CAACC,IAAR,CACE,0BADF,EAEE,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AAC1B,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,4BAA4B,EAAEC,0BAF1B;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,eAAe,EAAEC,aAJb;AAKJC,MAAAA,MAAM,EAAEC,IALJ;AAMJC,MAAAA,YANI;AAOJC,MAAAA,gBAPI;AAQJC,MAAAA;AARI,QASFZ,KATJ;AAUA,UAAM;AACJa,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF,OADH;AAEJC,MAAAA;AAFI,QAGFd,OAHJ;;AAKA,QAAI,CAACa,cAAL,EAAqB;AACnB,aAAOf,MAAP;AACD;;AAED,WAAOG,MAAM,CACXH,MADW,EAEXK,0BAA0B,CAACY,SAA3B,CAAqCC,MAArC,CAA4C,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1D;AACA,UAAIA,IAAI,CAACC,QAAT,EAAmB,OAAOF,IAAP;AACnB,UAAI,CAACC,IAAI,CAACE,SAAV,EAAqB,OAAOH,IAAP;AACrB,UAAIT,IAAI,CAACU,IAAD,EAAO,SAAP,CAAR,EAA2B,OAAOD,IAAP;AAE3B,YAAMI,SAAS,GAAGjB,UAAU,CAACkB,oBAAX,CAAgCJ,IAAhC,CAAlB;;AACA,UAAI;AACFD,QAAAA,IAAI,GAAGhB,MAAM,CACXgB,IADW,EAEX;AACE,WAACI,SAAD,GAAaf,aAAa,CAACe,SAAD,EAAYH,IAAZ,EAAkBnB,KAAlB,EAAyB;AACjDe,YAAAA,cADiD;AAEjDS,YAAAA,UAAU,EAAE;AAFqC,WAAzB;AAD5B,SAFW,EAQV,6BAA4Bb,gBAAgB,CAC3CQ,IAD2C,CAE3C,4DAA2DP,sBAAsB,CACjFO,IADiF,EAEjF;AACEM,UAAAA,IAAI,EAAE;AADR,SAFiF,CAKjF,EAfS,CAAb;AAiBD,OAlBD,CAkBE,OAAOC,CAAP,EAAU;AACVhB,QAAAA,YAAY,CAACgB,CAAD,CAAZ;AACD;;AACD,aAAOR,IAAP;AACD,KA7BD,EA6BG,EA7BH,CAFW,EAgCV,kDAhCU,CAAb;AAkCD,GAxDH,EAyDE,CAAC,sBAAD,CAzDF;AA2DD,C","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgMutationProceduresPlugin(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        inflection,\n        pgMakeProcField: makeProcField,\n        pgOmit: omit,\n        swallowError,\n        describePgEntity,\n        sqlCommentByAddingTags,\n      } = build;\n      const {\n        scope: { isRootMutation },\n        fieldWithHooks,\n      } = context;\n\n      if (!isRootMutation) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        introspectionResultsByKind.procedure.reduce((memo, proc) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (proc.isStable) return memo;\n          if (!proc.namespace) return memo;\n          if (omit(proc, \"execute\")) return memo;\n\n          const fieldName = inflection.functionMutationName(proc);\n          try {\n            memo = extend(\n              memo,\n              {\n                [fieldName]: makeProcField(fieldName, proc, build, {\n                  fieldWithHooks,\n                  isMutation: true,\n                }),\n              },\n              `Adding mutation field for ${describePgEntity(\n                proc\n              )}. You can rename this field with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                proc,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`\n            );\n          } catch (e) {\n            swallowError(e);\n          }\n          return memo;\n        }, {}),\n        `Adding mutation procedure to root Mutation field`\n      );\n    },\n    [\"PgMutationProcedures\"]\n  );\n}: Plugin);\n"],"file":"PgMutationProceduresPlugin.js"}