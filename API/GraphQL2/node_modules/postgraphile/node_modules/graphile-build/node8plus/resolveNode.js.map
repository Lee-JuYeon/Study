{"version":3,"sources":["../src/resolveNode.js"],"names":["resolveNode","nodeId","build","getDataFromParsedResolveInfoFragment","data","context","resolveInfo","$$isQuery","$$nodeType","parseResolveInfo","nodeFetcherByTypeName","getTypeAndIdentifiersFromNodeId","graphql","getNamedType","Type","identifiers","Error","resolver","name","parsedResolveInfoFragment","resolveData","node","returnType","Object","defineProperty","enumerable","configurable","value","e"],"mappings":";;;;;;;AAAe,eAAeA,WAAf,CACbC,MADa,EAEbC,KAFa,EAGb;AAAEC,EAAAA;AAAF,CAHa,EAIbC,IAJa,EAKbC,OALa,EAMbC,WANa,EAOb;AACA,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,qBAJI;AAKJC,IAAAA,+BALI;AAMJC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AANL,MAOFX,KAPJ;;AAQA,MAAID,MAAM,KAAK,OAAf,EAAwB;AACtB,WAAOM,SAAP;AACD;;AACD,MAAI;AACF,UAAM;AAAEO,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAwBJ,+BAA+B,CAACV,MAAD,CAA7D;;AACA,QAAI,CAACa,IAAL,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,UAAMC,QAAQ,GAAGP,qBAAqB,CAACG,YAAY,CAACC,IAAD,CAAZ,CAAmBI,IAApB,CAAtC;AACA,UAAMC,yBAAyB,GAAGV,gBAAgB,CAACH,WAAD,EAAc,EAAd,EAAkBQ,IAAlB,CAAlD;AACA,UAAMM,WAAW,GAAGjB,oCAAoC,CACtDgB,yBADsD,EAEtDN,YAAY,CAACC,IAAD,CAF0C,CAAxD;AAIA,UAAMO,IAAI,GAAG,MAAMJ,QAAQ,CACzBb,IADyB,EAEzBW,WAFyB,EAGzBV,OAHyB,EAIzBc,yBAJyB,EAKzBb,WAAW,CAACgB,UALa,EAMzBF,WANyB,EAOzBd,WAPyB,CAA3B;AASAiB,IAAAA,MAAM,CAACC,cAAP,CAAsBH,IAAtB,EAA4Bb,UAA5B,EAAwC;AACtCiB,MAAAA,UAAU,EAAE,KAD0B;AAEtCC,MAAAA,YAAY,EAAE,KAFwB;AAGtCC,MAAAA,KAAK,EAAEb;AAH+B,KAAxC;AAKA,WAAOO,IAAP;AACD,GA1BD,CA0BE,OAAOO,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF","sourcesContent":["export default async function resolveNode(\n  nodeId,\n  build,\n  { getDataFromParsedResolveInfoFragment },\n  data,\n  context,\n  resolveInfo\n) {\n  const {\n    $$isQuery,\n    $$nodeType,\n    parseResolveInfo,\n    nodeFetcherByTypeName,\n    getTypeAndIdentifiersFromNodeId,\n    graphql: { getNamedType },\n  } = build;\n  if (nodeId === \"query\") {\n    return $$isQuery;\n  }\n  try {\n    const { Type, identifiers } = getTypeAndIdentifiersFromNodeId(nodeId);\n    if (!Type) {\n      throw new Error(\"Type not found\");\n    }\n    const resolver = nodeFetcherByTypeName[getNamedType(Type).name];\n    const parsedResolveInfoFragment = parseResolveInfo(resolveInfo, {}, Type);\n    const resolveData = getDataFromParsedResolveInfoFragment(\n      parsedResolveInfoFragment,\n      getNamedType(Type)\n    );\n    const node = await resolver(\n      data,\n      identifiers,\n      context,\n      parsedResolveInfoFragment,\n      resolveInfo.returnType,\n      resolveData,\n      resolveInfo\n    );\n    Object.defineProperty(node, $$nodeType, {\n      enumerable: false,\n      configurable: false,\n      value: Type,\n    });\n    return node;\n  } catch (e) {\n    return null;\n  }\n}\n"],"file":"resolveNode.js"}