{"version":3,"sources":["../../src/plugins/QueryPlugin.js"],"names":["QueryPlugin","builder","hook","build","extend","$$isQuery","Symbol","schema","newWithHooks","graphql","GraphQLObjectType","GraphQLNonNull","inflection","queryType","description","wrapDescription","name","builtin","isTypeOf","value","_context","info","parentType","fields","Self","query","type","resolve","__origin","isRootQuery"],"mappings":";;;;;;;IAO+BA,W,GAAf,eAAeA,WAAf,CAA2BC,OAA3B,EAAoC;AAClDA,EAAAA,OAAO,CAACC,IAAR,CACE,OADF,EAEGC,KAAD,IACEA,KAAK,CAACC,MAAN,CACED,KADF,EAEE;AACEE,IAAAA,SAAS,EAAEC,MAAM,CAAC,SAAD;AADnB,GAFF,EAKG,iBALH,CAHJ,EAUE,CAAC,OAAD,CAVF;AAYAL,EAAAA,OAAO,CAACC,IAAR,CACE,eADF,EAEE,CAACK,MAAD,EAAaJ,KAAb,KAAuB;AACrB,UAAM;AACJE,MAAAA,SADI;AAEJG,MAAAA,YAFI;AAGJJ,MAAAA,MAHI;AAIJK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,iBAAF;AAAqBC,QAAAA;AAArB,OAJL;AAKJC,MAAAA;AALI,QAMFT,KANJ;AAOA,UAAMU,SAAS,GAAGL,YAAY,CAC5BE,iBAD4B,EAE5B;AACEI,MAAAA,WAAW,EAAEX,KAAK,CAACY,eAAN,CACX,uEADW,EAEX,MAFW,CADf;AAKEC,MAAAA,IAAI,EAAEJ,UAAU,CAACK,OAAX,CAAmB,OAAnB,CALR;AAMEC,MAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KACRA,IAAI,CAACC,UAAL,IAAmB,IAAnB,IAA2BH,KAAK,KAAKd,SAPzC;AAQEkB,MAAAA,MAAM,EAAE,CAAC;AAAEC,QAAAA;AAAF,OAAD,MAAe;AACrBC,QAAAA,KAAK,EAAE;AACLX,UAAAA,WAAW,EAAEX,KAAK,CAACY,eAAN,CACX,wJADW,EAEX,OAFW,CADR;AAKLW,UAAAA,IAAI,EAAE,IAAIf,cAAJ,CAAmBa,IAAnB,CALD;;AAMLG,UAAAA,OAAO,GAAG;AACR,mBAAOtB,SAAP;AACD;;AARI;AADc,OAAf;AARV,KAF4B,EAuB5B;AACEuB,MAAAA,QAAQ,EAAG,2CADb;AAEEC,MAAAA,WAAW,EAAE;AAFf,KAvB4B,EA2B5B,IA3B4B,CAA9B;;AA6BA,QAAIhB,SAAJ,EAAe;AACb,aAAOT,MAAM,CACXG,MADW,EAEX;AACEkB,QAAAA,KAAK,EAAEZ;AADT,OAFW,EAKV,+BALU,CAAb;AAOD,KARD,MAQO;AACL,aAAON,MAAP;AACD;AACF,GAlDH,EAmDE,CAAC,OAAD,CAnDF;AAqDD,C","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\n\nexport type BuildExtensionQuery = {|\n  $$isQuery: Symbol,\n|};\n\nexport default (async function QueryPlugin(builder) {\n  builder.hook(\n    \"build\",\n    (build: Build): Build & BuildExtensionQuery =>\n      build.extend(\n        build,\n        {\n          $$isQuery: Symbol(\"isQuery\"),\n        },\n        `Extending Build`\n      ),\n    [\"Query\"]\n  );\n  builder.hook(\n    \"GraphQLSchema\",\n    (schema: {}, build) => {\n      const {\n        $$isQuery,\n        newWithHooks,\n        extend,\n        graphql: { GraphQLObjectType, GraphQLNonNull },\n        inflection,\n      } = build;\n      const queryType = newWithHooks(\n        GraphQLObjectType,\n        {\n          description: build.wrapDescription(\n            \"The root query type which gives access points into the data universe.\",\n            \"type\"\n          ),\n          name: inflection.builtin(\"Query\"),\n          isTypeOf: (value, _context, info) =>\n            info.parentType == null || value === $$isQuery,\n          fields: ({ Self }) => ({\n            query: {\n              description: build.wrapDescription(\n                \"Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.\",\n                \"field\"\n              ),\n              type: new GraphQLNonNull(Self),\n              resolve() {\n                return $$isQuery;\n              },\n            },\n          }),\n        },\n        {\n          __origin: `graphile-build built-in (root query type)`,\n          isRootQuery: true,\n        },\n        true\n      );\n      if (queryType) {\n        return extend(\n          schema,\n          {\n            query: queryType,\n          },\n          `Adding 'query' type to Schema`\n        );\n      } else {\n        return schema;\n      }\n    },\n    [\"Query\"]\n  );\n}: Plugin);\n"],"file":"QueryPlugin.js"}