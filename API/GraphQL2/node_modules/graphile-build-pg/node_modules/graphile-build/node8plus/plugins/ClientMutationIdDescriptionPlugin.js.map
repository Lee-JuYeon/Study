{"version":3,"sources":["../../src/plugins/ClientMutationIdDescriptionPlugin.js"],"names":["ClientMutationIdDescriptionPlugin","builder","hook","field","build","context","extend","scope","isMutationInput","fieldName","Self","description","wrapDescription","name","isMutationPayload","args","isRootMutation","input"],"mappings":";;;;;;;IAGyBA,iC,GAAT,SAASA,iCAAT,CACdC,OADc,EAEd;AACAA,EAAAA,OAAO,CAACC,IAAR,CACE,qCADF,EAEE,CAACC,KAAD,EAAQC,KAAR,EAAeC,OAAf,KAA2B;AACzB,UAAM;AAAEC,MAAAA;AAAF,QAAaF,KAAnB;AACA,UAAM;AACJG,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,OADH;AAEJC,MAAAA;AAFI,QAGFL,OAHJ;;AAIA,QACE,CAACG,eAAD,IACAC,SAAS,KAAK,kBADd,IAEAN,KAAK,CAACQ,WAHR,EAIE;AACA,aAAOR,KAAP;AACD;;AACD,WAAOG,MAAM,CACXH,KADW,EAEX;AACEQ,MAAAA,WAAW,EAAEP,KAAK,CAACQ,eAAN,CACX,6IADW,EAEX,OAFW;AADf,KAFW,EAQV,aAAYH,SAAU,eAAcC,IAAI,CAACG,IAAK,GARpC,CAAb;AAUD,GAzBH,EA0BE,CAAC,6BAAD,CA1BF;AA6BAZ,EAAAA,OAAO,CAACC,IAAR,CACE,gCADF,EAEE,CAACC,KAAD,EAAQC,KAAR,EAAeC,OAAf,KAA2B;AACzB,UAAM;AAAEC,MAAAA;AAAF,QAAaF,KAAnB;AACA,UAAM;AACJG,MAAAA,KAAK,EAAE;AAAEO,QAAAA,iBAAF;AAAqBL,QAAAA;AAArB,OADH;AAEJC,MAAAA;AAFI,QAGFL,OAHJ;;AAIA,QACE,CAACS,iBAAD,IACAL,SAAS,KAAK,kBADd,IAEAN,KAAK,CAACQ,WAHR,EAIE;AACA,aAAOR,KAAP;AACD;;AACD,WAAOG,MAAM,CACXH,KADW,EAEX;AACEQ,MAAAA,WAAW,EAAEP,KAAK,CAACQ,eAAN,CACX,8IADW,EAEX,OAFW;AADf,KAFW,EAQV,aAAYH,SAAU,eAAcC,IAAI,CAACG,IAAK,GARpC,CAAb;AAUD,GAzBH,EA0BE,CAAC,6BAAD,CA1BF;AA6BAZ,EAAAA,OAAO,CAACC,IAAR,CACE,qCADF,EAEE,CAACa,IAAD,EAAuDX,KAAvD,EAA8DC,OAA9D,KAA0E;AACxE,UAAM;AAAEC,MAAAA;AAAF,QAAaF,KAAnB;AACA,UAAM;AACJG,MAAAA,KAAK,EAAE;AAAES,QAAAA,cAAF;AAAkBP,QAAAA;AAAlB,OADH;AAEJC,MAAAA;AAFI,QAGFL,OAHJ;;AAIA,QAAI,CAACW,cAAD,IAAmB,CAACD,IAAI,CAACE,KAAzB,IAAkCF,IAAI,CAACE,KAAL,CAAWN,WAAjD,EAA8D;AAC5D,aAAOI,IAAP;AACD;;AACD,WAAO,EACL,GAAGA,IADE;AAELE,MAAAA,KAAK,EAAEX,MAAM,CACXS,IAAI,CAACE,KADM,EAEX;AACEN,QAAAA,WAAW,EAAEP,KAAK,CAACQ,eAAN,CACX,0HADW,EAEX,KAFW;AADf,OAFW,EAQV,gDAA+CH,SAAU,eAAcC,IAAI,CAACG,IAAK,GARvE;AAFR,KAAP;AAaD,GAxBH,EAyBE,CAAC,6BAAD,CAzBF;AA2BD,C","sourcesContent":["// @flow\nimport type SchemaBuilder, { Plugin } from \"../SchemaBuilder\";\n\nexport default (function ClientMutationIdDescriptionPlugin(\n  builder: SchemaBuilder\n) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields:field\",\n    (field, build, context) => {\n      const { extend } = build;\n      const {\n        scope: { isMutationInput, fieldName },\n        Self,\n      } = context;\n      if (\n        !isMutationInput ||\n        fieldName !== \"clientMutationId\" ||\n        field.description\n      ) {\n        return field;\n      }\n      return extend(\n        field,\n        {\n          description: build.wrapDescription(\n            \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n            \"field\"\n          ),\n        },\n        `Tweaking '${fieldName}' field in '${Self.name}'`\n      );\n    },\n    [\"ClientMutationIdDescription\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields:field\",\n    (field, build, context) => {\n      const { extend } = build;\n      const {\n        scope: { isMutationPayload, fieldName },\n        Self,\n      } = context;\n      if (\n        !isMutationPayload ||\n        fieldName !== \"clientMutationId\" ||\n        field.description\n      ) {\n        return field;\n      }\n      return extend(\n        field,\n        {\n          description: build.wrapDescription(\n            \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n            \"field\"\n          ),\n        },\n        `Tweaking '${fieldName}' field in '${Self.name}'`\n      );\n    },\n    [\"ClientMutationIdDescription\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args: { input?: { description?: string, ... }, ... }, build, context) => {\n      const { extend } = build;\n      const {\n        scope: { isRootMutation, fieldName },\n        Self,\n      } = context;\n      if (!isRootMutation || !args.input || args.input.description) {\n        return args;\n      }\n      return {\n        ...args,\n        input: extend(\n          args.input,\n          {\n            description: build.wrapDescription(\n              \"The exclusive input argument for this mutation. An object type, make sure to see documentation for this objectâ€™s fields.\",\n              \"arg\"\n            ),\n          },\n          `Adding a description to input arg for field '${fieldName}' field in '${Self.name}'`\n        ),\n      };\n    },\n    [\"ClientMutationIdDescription\"]\n  );\n}: Plugin);\n"],"file":"ClientMutationIdDescriptionPlugin.js"}