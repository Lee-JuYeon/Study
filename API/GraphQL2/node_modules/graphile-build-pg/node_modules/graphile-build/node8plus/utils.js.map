{"version":3,"sources":["../src/utils.js"],"names":["bindAll","obj","keys","forEach","key","bind","constantCaseAll","str","replace","toUpperCase","formatInsideUnderscores","fn","matches","match","Error","start","middle","end","upperFirst","upperFirstAll","camelCase","camelCaseAll","constantCase","upperCamelCase","pluralize","singularize","plz","singular","breakLine","line","maxLen","parts","split","RegExp","length","sublines","i","push","slice","wrapDescription","description","position","indentationLength","map","join"],"mappings":"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","sourcesContent":["// @flow\nimport upperFirstAll from \"lodash/upperFirst\";\nimport camelCaseAll from \"lodash/camelCase\";\nimport plz from \"pluralize\";\n\nconst bindAll = (obj: {}, keys: Array<string>): string => {\n  keys.forEach(key => {\n    obj[key] = obj[key].bind(obj);\n  });\n  return obj;\n};\n\nexport { bindAll };\n\nexport const constantCaseAll = (str: string): string =>\n  str\n    .replace(/[^a-zA-Z0-9_]+/g, \"_\")\n    .replace(/[A-Z]+/g, \"_$&\")\n    .replace(/__+/g, \"_\")\n    .replace(/^[^a-zA-Z0-9]+/, \"\")\n    .replace(/^[0-9]/, \"_$&\") // GraphQL enums must not start with a number\n    .toUpperCase();\n\nexport const formatInsideUnderscores =\n  (fn: (input: string) => string) =>\n  (str: string): string => {\n    const matches = str.match(/^(_*)([\\s\\S]*?)(_*)$/);\n    if (!matches) {\n      throw new Error(\"Impossible?\"); // Satiate Flow\n    }\n    const [, start, middle, end] = matches;\n    return `${start}${fn(middle)}${end}`;\n  };\n\nexport const upperFirst = formatInsideUnderscores(upperFirstAll);\nexport const camelCase = formatInsideUnderscores(camelCaseAll);\nexport const constantCase = formatInsideUnderscores(constantCaseAll);\nexport const upperCamelCase = (str: string): string =>\n  upperFirst(camelCase(str));\n\nexport const pluralize = (str: string): string => plz(str);\nexport const singularize = (str: string): string => plz.singular(str);\n\n// Copied from GraphQL v14, MIT license (c) GraphQL Contributors.\nfunction breakLine(line: string, maxLen: number): Array<string> {\n  const parts = line.split(new RegExp(`((?: |^).{15,${maxLen - 40}}(?= |$))`));\n  if (parts.length < 4) {\n    return [line];\n  }\n  const sublines = [parts[0] + parts[1] + parts[2]];\n  for (let i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1]);\n  }\n  return sublines;\n}\n\n/**\n * Only use this on descriptions that are plain text, or that we create\n * manually in code; since descriptions are markdown, it's not safe to use on\n * descriptions that contain code blocks or long inline code strings.\n */\nexport const wrapDescription = (\n  description: string,\n  position: \"root\" | \"type\" | \"field\" | \"arg\"\n): string => {\n  const indentationLength =\n    position === \"root\"\n      ? 0\n      : position === \"type\"\n      ? 0\n      : position === \"field\"\n      ? 2\n      : position === \"arg\"\n      ? 4\n      : 0;\n  // This follows the implementation from GraphQL v14 to make our GraphQL v15\n  // schema more similar. Ref:\n  // https://github.com/graphql/graphql-js/pull/2223/files\n  const maxLen = 120 - indentationLength;\n  return description\n    .split(\"\\n\")\n    .map(line => {\n      if (line.length < maxLen + 5) {\n        return line;\n      }\n      // For > 120 character long lines, cut at space boundaries into sublines\n      // of ~80 chars.\n      return breakLine(line, maxLen).join(\"\\n\");\n    })\n    .join(\"\\n\");\n};\n"],"file":"utils.js"}