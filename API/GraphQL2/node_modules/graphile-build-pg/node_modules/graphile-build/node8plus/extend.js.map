{"version":3,"sources":["../src/extend.js"],"names":["INDENT","$$hints","Symbol","indent","text","replace","extend","base","extra","hint","hints","keysB","Object","keys","extraHints","key","newValue","hintB","hintA","firstEntityDetails","chalk","magenta","secondEntityDetails","yellow","Error","bold","assign"],"mappings":";;;;;;;;AACA;;;;AAEA,MAAMA,MAAM,GAAG,IAAf;AACA,MAAMC,OAAO,GAAGC,MAAM,CAAC,OAAD,CAAtB;;AAEO,SAASC,MAAT,CAAgBC,IAAhB,EAA8B;AACnC,SACEJ,MAAM,GAAGI,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,OAAOL,MAA3B,EAAmCK,OAAnC,CAA2C,eAA3C,EAA4D,IAA5D,CADX;AAGD;;AAEc,SAASC,MAAT,CACbC,IADa,EAEbC,KAFa,EAGbC,IAHa,EAIA;AACb,QAAMC,KAAK,GAAGH,IAAI,CAACN,OAAD,CAAJ,IAAiB,EAA/B;AAEA,QAAMU,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAd;AACA,QAAMM,UAAU,GAAGN,KAAK,CAACP,OAAD,CAAL,IAAkB,EAArC;;AACA,OAAK,MAAMc,GAAX,IAAkBJ,KAAlB,EAAyB;AACvB,UAAMK,QAAQ,GAAGR,KAAK,CAACO,GAAD,CAAtB;AACA,UAAME,KAAK,GAAGH,UAAU,CAACC,GAAD,CAAV,IAAmBN,IAAjC;;AACA,QAAIM,GAAG,IAAIR,IAAP,IAAeA,IAAI,CAACQ,GAAD,CAAJ,KAAcC,QAAjC,EAA2C;AACzC,YAAME,KAAc,GAAGR,KAAK,CAACK,GAAD,CAA5B;AACA,YAAMI,kBAAkB,GAAG,CAACD,KAAD,GACvB,uDADuB,GAEtB,4BAA2Bf,MAAM,CAACiB,eAAMC,OAAN,CAAcH,KAAd,CAAD,CAAuB,EAF7D;AAGA,YAAMI,mBAAmB,GAAG,CAACL,KAAD,GACxB,wDADwB,GAEvB,6BAA4Bd,MAAM,CAACiB,eAAMG,MAAN,CAAaN,KAAb,CAAD,CAAsB,EAF7D;AAGA,YAAM,IAAIO,KAAJ,CACH,oFAAmFJ,eAAMK,IAAN,CAClFV,GADkF,CAElF,SAAQZ,MAAM,CAACgB,kBAAD,CAAqB,OAAMhB,MAAM,CAACmB,mBAAD,CAAsB,EAHnE,CAAN;AAKD;;AACD,QAAIL,KAAJ,EAAW;AACTP,MAAAA,KAAK,CAACK,GAAD,CAAL,GAAaE,KAAb;AACD;AACF;;AACD,SAAOL,MAAM,CAACc,MAAP,CAAcnB,IAAd,EAAoBC,KAApB,EAA2B;AAChC;AACA,KAACP,OAAD,GAAWS;AAFqB,GAA3B,CAAP;AAID","sourcesContent":["// @flow\nimport chalk from \"chalk\";\n\nconst INDENT = \"  \";\nconst $$hints = Symbol(\"hints\");\n\nexport function indent(text: string) {\n  return (\n    INDENT + text.replace(/\\n/g, \"\\n\" + INDENT).replace(/\\n +(?=\\n|$)/g, \"\\n\")\n  );\n}\n\nexport default function extend<Obj1: *, Obj2: *>(\n  base: Obj1,\n  extra: Obj2,\n  hint?: string\n): Obj1 & Obj2 {\n  const hints = base[$$hints] || {};\n\n  const keysB = Object.keys(extra);\n  const extraHints = extra[$$hints] || {};\n  for (const key of keysB) {\n    const newValue = extra[key];\n    const hintB = extraHints[key] || hint;\n    if (key in base && base[key] !== newValue) {\n      const hintA: ?string = hints[key];\n      const firstEntityDetails = !hintA\n        ? \"We don't have any information about the first entity.\"\n        : `The first entity was:\\n\\n${indent(chalk.magenta(hintA))}`;\n      const secondEntityDetails = !hintB\n        ? \"We don't have any information about the second entity.\"\n        : `The second entity was:\\n\\n${indent(chalk.yellow(hintB))}`;\n      throw new Error(\n        `A naming conflict has occurred - two entities have tried to define the same key '${chalk.bold(\n          key\n        )}'.\\n\\n${indent(firstEntityDetails)}\\n\\n${indent(secondEntityDetails)}`\n      );\n    }\n    if (hintB) {\n      hints[key] = hintB;\n    }\n  }\n  return Object.assign(base, extra, {\n    // $FlowFixMe: symbols\n    [$$hints]: hints,\n  });\n}\n"],"file":"extend.js"}