{"version":3,"sources":["../src/index.js"],"names":["getBuilder","plugins","options","builder","SchemaBuilder","i","l","length","plugin","Error","util","inspect","_setPluginName","displayName","name","buildSchema","defaultPlugins","SwallowErrorsPlugin","StandardTypesPlugin","NodePlugin","QueryPlugin","MutationPlugin","SubscriptionPlugin","ClientMutationIdDescriptionPlugin","MutationPayloadQueryPlugin","AddQueriesToSubscriptionsPlugin","TrimEmptyDescriptionsPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAYA;;AAKA;;AAyBA;;;;AAEO,MAAMA,UAAU,GAAG,OACxBC,OADwB,EAExBC,OAAgB,GAAG,EAFK,KAGG;AAC3B,QAAMC,OAAO,GAAG,IAAIC,sBAAJ,CAAkBF,OAAlB,CAAhB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCF,CAAC,GAAGC,CAAxC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,UAAMG,MAAM,GAAGP,OAAO,CAACI,CAAD,CAAtB;;AACA,QAAI,OAAOG,MAAP,KAAkB,UAAtB,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CACH,uFAAsFJ,CAAE,KAAIK,cAAKC,OAAL,CAC3FH,MAD2F,CAE3F,EAHE,CAAN;AAKD,KAR6C,CAS9C;;;AACAL,IAAAA,OAAO,CAACS,cAAR,CAAuBJ,MAAM,CAACK,WAAP,IAAsBL,MAAM,CAACM,IAApD;;AACA,UAAMN,MAAM,CAACL,OAAD,EAAUD,OAAV,CAAZ;;AACAC,IAAAA,OAAO,CAACS,cAAR,CAAuB,IAAvB;AACD;;AACD,SAAOT,OAAP;AACD,CApBM;;;;AAsBA,MAAMY,WAAW,GAAG,OACzBd,OADyB,EAEzBC,OAAgB,GAAG,EAFM,KAGE;AAC3B,QAAMC,OAAsB,GAAG,MAAMH,UAAU,CAACC,OAAD,EAAUC,OAAV,CAA/C;AACA,SAAOC,OAAO,CAACY,WAAR,EAAP;AACD,CANM;;;AAQA,MAAMC,cAA6B,GAAG,CAC3CC,4BAD2C,EAE3CC,4BAF2C,EAG3CC,mBAH2C,EAI3CC,oBAJ2C,EAK3CC,uBAL2C,EAM3CC,2BAN2C,EAO3CC,0CAP2C,EAQ3CC,mCAR2C,EAS3CC,wCAT2C,EAU3CC,oCAV2C,CAAtC","sourcesContent":["// @flow\n\nimport util from \"util\";\nimport SchemaBuilder from \"./SchemaBuilder\";\nimport {\n  SwallowErrorsPlugin,\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n  AddQueriesToSubscriptionsPlugin,\n  TrimEmptyDescriptionsPlugin,\n} from \"./plugins\";\nimport resolveNode from \"./resolveNode\";\nimport type { GraphQLSchema } from \"graphql\";\n\nimport type { Plugin, Options } from \"./SchemaBuilder\";\n\nexport {\n  constantCaseAll,\n  formatInsideUnderscores,\n  upperFirst,\n  camelCase,\n  constantCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n} from \"./utils\";\n\nexport type { SchemaBuilder };\n\nexport type {\n  Plugin,\n  Options,\n  Build,\n  BuildExtensionQuery,\n  Scope,\n  Context,\n  Hook,\n  WatchUnwatch,\n  SchemaListener,\n} from \"./SchemaBuilder\";\n\nexport { LiveSource, LiveProvider, LiveMonitor, LiveCoordinator } from \"./Live\";\n\nexport const getBuilder = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<SchemaBuilder> => {\n  const builder = new SchemaBuilder(options);\n  for (let i = 0, l = plugins.length; i < l; i++) {\n    const plugin = plugins[i];\n    if (typeof plugin !== \"function\") {\n      throw new Error(\n        `Expected a list of plugin functions, instead list contained a non-function at index ${i}: ${util.inspect(\n          plugin\n        )}`\n      );\n    }\n    // $FlowFixMe: displayName\n    builder._setPluginName(plugin.displayName || plugin.name);\n    await plugin(builder, options);\n    builder._setPluginName(null);\n  }\n  return builder;\n};\n\nexport const buildSchema = async (\n  plugins: Array<Plugin>,\n  options: Options = {}\n): Promise<GraphQLSchema> => {\n  const builder: SchemaBuilder = await getBuilder(plugins, options);\n  return builder.buildSchema();\n};\n\nexport const defaultPlugins: Array<Plugin> = [\n  SwallowErrorsPlugin,\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n  AddQueriesToSubscriptionsPlugin,\n  TrimEmptyDescriptionsPlugin,\n];\n\nexport {\n  SwallowErrorsPlugin,\n  StandardTypesPlugin,\n  NodePlugin,\n  QueryPlugin,\n  MutationPlugin,\n  SubscriptionPlugin,\n  ClientMutationIdDescriptionPlugin,\n  MutationPayloadQueryPlugin,\n  AddQueriesToSubscriptionsPlugin,\n  // resolveNode: EXPERIMENTAL, API might change!\n  resolveNode,\n};\n"],"file":"index.js"}