{"version":3,"sources":["../src/omit.js"],"names":["CREATE","READ","UPDATE","DELETE","FILTER","ORDER","ALL","MANY","EXECUTE","BASE","aliases","C","R","U","D","F","O","A","M","X","B","PERMISSIONS_THAT_REQUIRE_READ","parse","arrOrNot","errorPrefix","arr","Array","isArray","all","arrayNormalized","concat","map","str","perms","slice","split","p","bad","find","Error","omit","entity","permission","tags","omitSpecRaw","includeSpecRaw","kind","name","omitSpec","includeSpec","indexOf","filter","length","join"],"mappings":";;;;;;;;AASA;AACA;AACA;AACO,MAAMA,MAAM,GAAG,QAAf;;AACA,MAAMC,IAAI,GAAG,MAAb;;AACA,MAAMC,MAAM,GAAG,QAAf;;AACA,MAAMC,MAAM,GAAG,QAAf;;AACA,MAAMC,MAAM,GAAG,QAAf;;AACA,MAAMC,KAAK,GAAG,OAAd;;AACA,MAAMC,GAAG,GAAG,KAAZ;;AACA,MAAMC,IAAI,GAAG,MAAb;;AACA,MAAMC,OAAO,GAAG,SAAhB;;AACA,MAAMC,IAAI,GAAG,MAAb;;AAEP,MAAMC,OAAO,GAAG;AACdC,EAAAA,CAAC,EAAEX,MADW;AAEdY,EAAAA,CAAC,EAAEX,IAFW;AAGdY,EAAAA,CAAC,EAAEX,MAHW;AAIdY,EAAAA,CAAC,EAAEX,MAJW;AAKdY,EAAAA,CAAC,EAAEX,MALW;AAMdY,EAAAA,CAAC,EAAEX,KANW;AAOdY,EAAAA,CAAC,EAAEX,GAPW;AAQdY,EAAAA,CAAC,EAAEX,IARW;AASdY,EAAAA,CAAC,EAAEX,OATW;AAUdY,EAAAA,CAAC,EAAEX;AAVW,CAAhB;AAaA,MAAMY,6BAA6B,GAAG,CAACnB,MAAD,EAASF,MAAT,EAAiBG,MAAjB,EAAyBG,GAAzB,EAA8BC,IAA9B,CAAtC;;AAEA,SAASe,KAAT,CAAeC,QAAf,EAAyBC,WAAW,GAAG,OAAvC,EAAgD;AAC9C,MAAI,CAACD,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AACD,QAAME,GAAG,GAAGC,KAAK,CAACC,OAAN,CAAcJ,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAjD;AACA,MAAIK,GAAG,GAAG,KAAV;AACA,QAAMC,eAAe,GAAG,GAAGC,MAAH,CACtB,GAAGL,GAAG,CAACM,GAAJ,CAAQC,GAAG,IAAI;AAChB,QAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,GAA5B,EAAiC;AAC/BJ,MAAAA,GAAG,GAAG,IAAN;AACA,aAAO,EAAP;AACD;;AACD,QAAII,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,YAAMC,KAAK,GAAGD,GAAG,CACdE,KADW,CACL,CADK,EAEXC,KAFW,CAEL,EAFK,EAGXJ,GAHW,CAGPK,CAAC,IAAI1B,OAAO,CAAC0B,CAAD,CAHL,CAAd;AAIA,YAAMC,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAWF,CAAC,IAAI,CAACA,CAAjB,CAAZ;;AACA,UAAIC,GAAJ,EAAS;AACP,cAAM,IAAIE,KAAJ,CACH,GAAEf,WAAY,6BAA4Ba,GAAI,kBAD3C,CAAN;AAGD;;AACD,aAAOJ,KAAP;AACD,KAZD,MAYO;AACL,YAAMA,KAAK,GAAGD,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAd,CADK,CAEL;;AACA,aAAOF,KAAP;AACD;AACF,GAtBE,CADmB,CAAxB;;AAyBA,MAAIL,GAAJ,EAAS;AACP,WAAO,IAAP;AACD;;AACD,SAAOC,eAAP;AACD;;AAEc,SAASW,IAAT,CACbC,MADa,EAEbC,UAFa,EAGb;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAMC,WAAW,GAAGD,IAAI,CAACH,IAAzB,CAFA,CAIA;AACA;;AACA,QAAMK,cAAc,GAAG,IAAvB,CANA,CAOA;;AAEA,MAAID,WAAW,IAAIC,cAAnB,EAAmC;AACjC,UAAM,IAAIN,KAAJ,CACH,0CAAyCE,MAAM,CAACK,IAAK,KAAIL,MAAM,CAACM,IAAK,uDADlE,CAAN;AAGD;;AACD,QAAMC,QAAQ,GAAG1B,KAAK,CACpBsB,WADoB,EAEnB,gDAA+CH,MAAM,CAACK,IAAK,KAAIL,MAAM,CAACM,IAAK,GAFxD,CAAtB;AAIA,QAAME,WAAW,GAAG3B,KAAK,CACvBuB,cADuB,EAEtB,mDAAkDJ,MAAM,CAACK,IAAK,KAAIL,MAAM,CAACM,IAAK,GAFxD,CAAzB;;AAKA,MAAIC,QAAJ,EAAc;AACZ,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AACD,QAAIA,QAAQ,CAACE,OAAT,CAAiBjD,IAAjB,KAA0B,CAA9B,EAAiC;AAC/B,YAAMoC,GAAG,GAAGhB,6BAA6B,CAAC8B,MAA9B,CACVf,CAAC,IAAIY,QAAQ,CAACE,OAAT,CAAiBd,CAAjB,MAAwB,CAAC,CADpB,CAAZ;;AAGA,UAAIC,GAAG,CAACe,MAAJ,GAAa,CAAjB,EAAoB;AAClB,cAAM,IAAIb,KAAJ,CACH,wBAAuBE,MAAM,CAACK,IAAK,KAAIL,MAAM,CAACM,IAAK,QAAOV,GAAG,CAACgB,IAAJ,CACzD,GADyD,CAEzD,2BAA0BpD,IAAK,sBAAqBoC,GAAG,CAACgB,IAAJ,CACpD,GADoD,CAEpD,4DALE,CAAN;AAOD;AACF;;AACD,WAAOL,QAAQ,CAACE,OAAT,CAAiBR,UAAjB,KAAgC,CAAvC;AACD,GAnBD,MAmBO,IAAIO,WAAJ,EAAiB;AACtB,QAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,YAAM,IAAIV,KAAJ,CACH,0CAAyCE,MAAM,CAACK,IAAK,KAAIL,MAAM,CAACM,IAAK,+CADlE,CAAN;AAGD;;AACD,QAAIE,WAAW,CAACC,OAAZ,CAAoBjD,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AACpC,YAAMoC,GAAG,GAAGhB,6BAA6B,CAACiB,IAA9B,CACVF,CAAC,IAAIa,WAAW,CAACC,OAAZ,CAAoBd,CAApB,KAA0B,CADrB,CAAZ;;AAGA,UAAIC,GAAJ,EAAS;AACP,cAAM,IAAIE,KAAJ,CACH,sCAAqCE,MAAM,CAACK,IAAK,KAAIL,MAAM,CAACM,IAAK,mCAAkCV,GAAI,WAAUpC,IAAK,gBADnH,CAAN;AAGD;AACF;;AACD,WAAOgD,WAAW,CAACC,OAAZ,CAAoBR,UAApB,MAAoC,CAAC,CAA5C;AACD,GAjBM,MAiBA;AACL,WAAO,KAAP;AACD;AACF","sourcesContent":["// @flow\n\nimport type {\n  PgProc,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n} from \"./plugins/PgIntrospectionPlugin\";\n\n/*\n * Please only use capitals for aliases and lower case for the values.\n */\nexport const CREATE = \"create\";\nexport const READ = \"read\";\nexport const UPDATE = \"update\";\nexport const DELETE = \"delete\";\nexport const FILTER = \"filter\";\nexport const ORDER = \"order\";\nexport const ALL = \"all\";\nexport const MANY = \"many\";\nexport const EXECUTE = \"execute\";\nexport const BASE = \"base\";\n\nconst aliases = {\n  C: CREATE,\n  R: READ,\n  U: UPDATE,\n  D: DELETE,\n  F: FILTER,\n  O: ORDER,\n  A: ALL,\n  M: MANY,\n  X: EXECUTE,\n  B: BASE,\n};\n\nconst PERMISSIONS_THAT_REQUIRE_READ = [UPDATE, CREATE, DELETE, ALL, MANY];\n\nfunction parse(arrOrNot, errorPrefix = \"Error\") {\n  if (!arrOrNot) {\n    return null;\n  }\n  const arr = Array.isArray(arrOrNot) ? arrOrNot : [arrOrNot];\n  let all = false;\n  const arrayNormalized = [].concat(\n    ...arr.map(str => {\n      if (str === true || str === \"*\") {\n        all = true;\n        return [];\n      }\n      if (str[0] === \":\") {\n        const perms = str\n          .slice(1)\n          .split(\"\")\n          .map(p => aliases[p]);\n        const bad = perms.find(p => !p);\n        if (bad) {\n          throw new Error(\n            `${errorPrefix} - abbreviated parameter '${bad}' not understood`\n          );\n        }\n        return perms;\n      } else {\n        const perms = str.split(\",\");\n        // TODO: warning if not in list?\n        return perms;\n      }\n    })\n  );\n  if (all) {\n    return true;\n  }\n  return arrayNormalized;\n}\n\nexport default function omit(\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) {\n  const tags = entity.tags;\n  const omitSpecRaw = tags.omit;\n\n  // '@include' is not being released yet because it would mean every new\n  // filter we added would become a breaking change for people using @include.\n  const includeSpecRaw = null;\n  // const includeSpecRaw = tags.include;\n\n  if (omitSpecRaw && includeSpecRaw) {\n    throw new Error(\n      `Error when processing instructions for ${entity.kind} '${entity.name}' - you must only specify @omit or @include, not both`\n    );\n  }\n  const omitSpec = parse(\n    omitSpecRaw,\n    `Error when processing @omit instructions for ${entity.kind} '${entity.name}'`\n  );\n  const includeSpec = parse(\n    includeSpecRaw,\n    `Error when processing @include instructions for ${entity.kind} '${entity.name}'`\n  );\n\n  if (omitSpec) {\n    if (omitSpec === true) {\n      return true;\n    }\n    if (omitSpec.indexOf(READ) >= 0) {\n      const bad = PERMISSIONS_THAT_REQUIRE_READ.filter(\n        p => omitSpec.indexOf(p) === -1\n      );\n      if (bad.length > 0) {\n        throw new Error(\n          `Processing @omit for ${entity.kind} '${entity.name}' - '${bad.join(\n            \",\"\n          )}' must be omitted when '${READ}' is omitted. Add '${bad.join(\n            \",\"\n          )}' to the @omit clause, or use '@omit' to omit all actions.`\n        );\n      }\n    }\n    return omitSpec.indexOf(permission) >= 0;\n  } else if (includeSpec) {\n    if (includeSpec === true) {\n      throw new Error(\n        `Error when processing instructions for ${entity.kind} '${entity.name}' - @include should specify a list of actions`\n      );\n    }\n    if (includeSpec.indexOf(READ) === -1) {\n      const bad = PERMISSIONS_THAT_REQUIRE_READ.find(\n        p => includeSpec.indexOf(p) >= 0\n      );\n      if (bad) {\n        throw new Error(\n          `Error when processing @include for ${entity.kind} '${entity.name}' - we currently don't support '${bad}' when '${READ}' is forbidden`\n        );\n      }\n    }\n    return includeSpec.indexOf(permission) === -1;\n  } else {\n    return false;\n  }\n}\n"],"file":"omit.js"}