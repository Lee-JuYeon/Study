{"version":3,"sources":["../src/inflections.js"],"names":["outputMessages","deprecate","fn","message","args","indexOf","push","console","warn","Error","apply","deprecateEverything","obj","Object","keys","reduce","memo","key","defaultUtils","constantCase","camelCase","upperCamelCase","pluralize","singularize","newInflector","overrides","undefined","singularizeTable","tableName","replace","argument","name","index","orderByType","typeName","orderByEnum","ascending","_table","_schema","domainType","enumName","inValue","value","_","$","enumType","conditionType","inputType","rangeBoundType","rangeType","patchType","patchField","itemName","tableNode","allRows","schema","functionName","functionPayloadType","functionInputType","tableType","column","singleRelationByKeys","detailedKeys","table","map","join","rowByUniqueKeys","updateByKeys","deleteByKeys","updateNode","deleteNode","updateByKeysInputType","deleteByKeysInputType","updateNodeInputType","deleteNodeInputType","manyRelationByKeys","_foreignTable","_foreignSchema","edge","edgeField","connection","scalarFunctionConnection","procName","_procSchema","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType","defaultInflection"],"mappings":";;;;;;;AAEA;;AAQA;;AAVA;AAYA,MAAMA,cAAc,GAAG,EAAvB,C,CAEA;;AACA,SAASC,SAAT,CAAmBC,EAAnB,EAAyDC,OAAzD,EAA0E;AACxE,MAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5B,WAAOA,EAAP;AACD;;AACD,SAAO,UAAU,GAAGE,IAAb,EAAmB;AACxB,QAAIJ,cAAc,CAACK,OAAf,CAAuBF,OAAvB,MAAoC,CAAC,CAAzC,EAA4C;AAC1CH,MAAAA,cAAc,CAACM,IAAf,CAAoBH,OAApB,EAD0C,CAE1C;;AACAI,MAAAA,OAAO,CAACC,IAAR,CAAa,IAAIC,KAAJ,CAAUN,OAAV,CAAb;AACD;;AACD,WAAOD,EAAE,CAACQ,KAAH,CAAS,IAAT,EAAeN,IAAf,CAAP;AACD,GAPD;AAQD;;AAED,SAASO,mBAAT,CAA6BC,GAA7B,EAGG;AACD,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC5CD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYhB,SAAS,CACnBW,GAAG,CAACK,GAAD,CADgB,EAElB,+EAA8EA,GAAI,mPAFhE,CAArB;AAIA,WAAOD,IAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD;;AAgBM,MAAME,YAA4B,GAAG;AAC1CC,EAAAA,YAAY,EAAZA,2BAD0C;AAE1CC,EAAAA,SAAS,EAATA,wBAF0C;AAG1CC,EAAAA,cAAc,EAAdA,6BAH0C;AAI1CC,EAAAA,SAAS,EAATA,wBAJ0C;AAK1CC,EAAAA,WAAW,EAAXA;AAL0C,CAArC;;;AAcA,MAAMC,YAAY,GAAG,CAC1BC,SAAsC,GAAGC,SADf,EAE1B;AACEP,EAAAA,YADF;AAEEC,EAAAA,SAFF;AAGEC,EAAAA,cAHF;AAIEC,EAAAA,SAJF;AAKEC,EAAAA;AALF,IAMoBL,YARM,KASZ;AACd,WAASS,gBAAT,CAA0BC,SAA1B,EAAqD;AACnD,WAAOL,WAAW,CAACK,SAAD,CAAX,CAAuBC,OAAvB,CACL,uCADK,EAEL,WAFK,CAAP;AAID;;AAED,SAAOlB,mBAAmB,CACxB,wCAAmB;AACjBW,IAAAA,SADiB;;AAEjBQ,IAAAA,QAAQ,CAACC,IAAD,EAAgBC,KAAhB,EAA+B;AACrC,aAAOZ,SAAS,CAACW,IAAI,IAAK,MAAKC,KAAM,EAArB,CAAhB;AACD,KAJgB;;AAKjBC,IAAAA,WAAW,CAACC,QAAD,EAAmB;AAC5B,aAAOb,cAAc,CAAE,GAAEC,SAAS,CAACY,QAAD,CAAW,WAAxB,CAArB;AACD,KAPgB;;AAQjBC,IAAAA,WAAW,CACTJ,IADS,EAETK,SAFS,EAGTC,MAHS,EAITC,OAJS,EAKT;AACA,aAAOnB,YAAY,CAAE,GAAEY,IAAK,IAAGK,SAAS,GAAG,KAAH,GAAW,MAAO,EAAvC,CAAnB;AACD,KAfgB;;AAgBjBG,IAAAA,UAAU,CAACR,IAAD,EAAe;AACvB,aAAOV,cAAc,CAACU,IAAD,CAArB;AACD,KAlBgB;;AAmBjBS,IAAAA,QAAQ,CAACC,OAAD,EAAkB;AACxB,UAAIC,KAAK,GAAGD,OAAZ;;AAEA,UAAIC,KAAK,KAAK,EAAd,EAAkB;AAChB,eAAO,SAAP;AACD,OALuB,CAOxB;AACA;AACA;AACA;;;AACAA,MAAAA,KAAK,GAAGA,KAAK,CACVb,OADK,CACG,KADH,EACU,YADV,EAELA,OAFK,CAEG,iBAFH,EAEsB,YAFtB,EAGLA,OAHK,CAGG,kBAHH,EAGuB,YAHvB,CAAR,CAXwB,CAgBxB;AACA;AACA;AACA;AACA;;AACAa,MAAAA,KAAK,GACH;AACE;AACA,aAAK,cAFP;AAGE,cAAM,uBAHR;AAIE,aAAK,OAJP;AAKE,cAAM,WALR;AAME,cAAM,WANR;AAOE,cAAM,oBAPR;AAQE,aAAK,WARP;AAUE;AACA,cAAM,MAXR;AAYE,eAAO,OAZT;AAaE,eAAO,UAbT;AAcE,gBAAQ,WAdV;AAgBE;AACA;AACA;AACA,aAAK,OAnBP;AAoBE,cAAM,gBApBR;AAqBE,cAAM,WArBR;AAsBE,eAAO,oBAtBT;AAwBE;AACA;AACA;AACA;AACA,aAAK,SA5BP;AA6BE,aAAK,MA7BP;AA8BE,aAAK,OA9BP;AA+BE,aAAK,OA/BP;AAgCE,cAAM,WAhCR;AAiCEC,QAAAA,CAAC,EAAE,YAjCL;AAkCE,aAAK,OAlCP;AAmCE,aAAK,UAnCP;AAoCEC,QAAAA,CAAC,EAAE,QApCL;AAqCE,aAAK,WArCP;AAsCE,aAAK,IAtCP;AAuCE,aAAK,YAvCP;AAwCE,aAAK,OAxCP;AAyCE,aAAK,UAzCP;AA0CE,aAAK,OA1CP;AA2CE,aAAK,WA3CP;AA4CE,aAAK,mBA5CP;AA6CE,aAAK,eA7CP;AA8CE,aAAK,OA9CP;AA+CE,aAAK,KA/CP;AAgDE,aAAK,OAhDP;AAiDE,aAAK,KAjDP;AAkDE,aAAK,cAlDP;AAmDE,aAAK,eAnDP;AAoDE,aAAK,kBApDP;AAqDE,aAAK,mBArDP;AAsDE,aAAK,YAtDP;AAuDE,aAAK;AAvDP,QAwDEF,KAxDF,KAwDYA,KAzDd;AA0DA,aAAOA,KAAP;AACD,KAnGgB;;AAoGjBG,IAAAA,QAAQ,CAACd,IAAD,EAAe;AACrB,aAAOV,cAAc,CAACU,IAAD,CAArB;AACD,KAtGgB;;AAuGjBe,IAAAA,aAAa,CAACZ,QAAD,EAAmB;AAC9B,aAAOb,cAAc,CAAE,GAAEa,QAAS,YAAb,CAArB;AACD,KAzGgB;;AA0GjBa,IAAAA,SAAS,CAACb,QAAD,EAAmB;AAC1B,aAAOb,cAAc,CAAE,GAAEa,QAAS,QAAb,CAArB;AACD,KA5GgB;;AA6GjBc,IAAAA,cAAc,CAACd,QAAD,EAAmB;AAC/B,aAAOb,cAAc,CAAE,GAAEa,QAAS,cAAb,CAArB;AACD,KA/GgB;;AAgHjBe,IAAAA,SAAS,CAACf,QAAD,EAAmB;AAC1B,aAAOb,cAAc,CAAE,GAAEa,QAAS,QAAb,CAArB;AACD,KAlHgB;;AAmHjBgB,IAAAA,SAAS,CAAChB,QAAD,EAAmB;AAC1B,aAAOb,cAAc,CAAE,GAAEa,QAAS,QAAb,CAArB;AACD,KArHgB;;AAsHjBiB,IAAAA,UAAU,CAACC,QAAD,EAAmB;AAC3B,aAAOhC,SAAS,CAAE,GAAEgC,QAAS,QAAb,CAAhB;AACD,KAxHgB;;AAyHjBxB,IAAAA,SAAS,CAACG,IAAD,EAAeO,OAAf,EAAiC;AACxC,aAAOlB,SAAS,CAACO,gBAAgB,CAACI,IAAD,CAAjB,CAAhB;AACD,KA3HgB;;AA4HjBsB,IAAAA,SAAS,CAACtB,IAAD,EAAeO,OAAf,EAAiC;AACxC,aAAOlB,SAAS,CAACO,gBAAgB,CAACI,IAAD,CAAjB,CAAhB;AACD,KA9HgB;;AA+HjBuB,IAAAA,OAAO,CAACvB,IAAD,EAAewB,MAAf,EAAgC;AACrC,aAAOnC,SAAS,CAAE,OAAM,KAAKE,SAAL,CAAe,KAAKM,SAAL,CAAeG,IAAf,EAAqBwB,MAArB,CAAf,CAA6C,EAArD,CAAhB;AACD,KAjIgB;;AAkIjBC,IAAAA,YAAY,CAACzB,IAAD,EAAeO,OAAf,EAAiC;AAC3C,aAAOlB,SAAS,CAACW,IAAD,CAAhB;AACD,KApIgB;;AAqIjB0B,IAAAA,mBAAmB,CAAC1B,IAAD,EAAeO,OAAf,EAAiC;AAClD,aAAOjB,cAAc,CAAE,GAAEU,IAAK,UAAT,CAArB;AACD,KAvIgB;;AAwIjB2B,IAAAA,iBAAiB,CAAC3B,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOjB,cAAc,CAAE,GAAEU,IAAK,QAAT,CAArB;AACD,KA1IgB;;AA2IjB4B,IAAAA,SAAS,CAAC5B,IAAD,EAAewB,MAAf,EAAgC;AACvC,aAAOlC,cAAc,CAAC,KAAKO,SAAL,CAAeG,IAAf,EAAqBwB,MAArB,CAAD,CAArB;AACD,KA7IgB;;AA8IjBK,IAAAA,MAAM,CAAC7B,IAAD,EAAeM,MAAf,EAA+BC,OAA/B,EAAiD;AACrD,aAAOlB,SAAS,CAACW,IAAD,CAAhB;AACD,KAhJgB;;AAiJjB8B,IAAAA,oBAAoB,CAACC,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AACvE,aAAOnC,SAAS,CACb,GAAE,KAAKQ,SAAL,CAAemC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CAChDE,GADoC,CAChC/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,EAHH,CAAhB;AAKD,KAvJgB;;AAwJjBC,IAAAA,eAAe,CAACJ,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AAClE,aAAOnC,SAAS,CACb,GAAE,KAAKQ,SAAL,CAAemC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CAChDE,GADoC,CAChC/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,EAHH,CAAhB;AAKD,KA9JgB;;AA+JjBE,IAAAA,YAAY,CAACL,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AAC/D,aAAOnC,SAAS,CACb,UAAS,KAAKQ,SAAL,CAAemC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CACvDE,GAD2C,CACvC/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADgC,EAE3CU,IAF2C,CAEtC,OAFsC,CAE7B,EAHH,CAAhB;AAKD,KArKgB;;AAsKjBG,IAAAA,YAAY,CAACN,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AAC/D,aAAOnC,SAAS,CACb,UAAS,KAAKQ,SAAL,CAAemC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CACvDE,GAD2C,CACvC/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADgC,EAE3CU,IAF2C,CAEtC,OAFsC,CAE7B,EAHH,CAAhB;AAKD,KA5KgB;;AA6KjBI,IAAAA,UAAU,CAACtC,IAAD,EAAeO,OAAf,EAAiC;AACzC,aAAOlB,SAAS,CAAE,UAASO,gBAAgB,CAACI,IAAD,CAAO,EAAlC,CAAhB;AACD,KA/KgB;;AAgLjBuC,IAAAA,UAAU,CAACvC,IAAD,EAAeO,OAAf,EAAiC;AACzC,aAAOlB,SAAS,CAAE,UAASO,gBAAgB,CAACI,IAAD,CAAO,EAAlC,CAAhB;AACD,KAlLgB;;AAmLjBwC,IAAAA,qBAAqB,CACnBT,YADmB,EAEnB/B,IAFmB,EAGnBO,OAHmB,EAInB;AACA,aAAOjB,cAAc,CAClB,UAASM,gBAAgB,CAACI,IAAD,CAAO,OAAM+B,YAAY,CAChDE,GADoC,CAChC/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,QAHE,CAArB;AAKD,KA7LgB;;AA8LjBO,IAAAA,qBAAqB,CACnBV,YADmB,EAEnB/B,IAFmB,EAGnBO,OAHmB,EAInB;AACA,aAAOjB,cAAc,CAClB,UAASM,gBAAgB,CAACI,IAAD,CAAO,OAAM+B,YAAY,CAChDE,GADoC,CAChC/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,QAHE,CAArB;AAKD,KAxMgB;;AAyMjBQ,IAAAA,mBAAmB,CAAC1C,IAAD,EAAeO,OAAf,EAAiC;AAClD,aAAOjB,cAAc,CAAE,UAASM,gBAAgB,CAACI,IAAD,CAAO,QAAlC,CAArB;AACD,KA3MgB;;AA4MjB2C,IAAAA,mBAAmB,CAAC3C,IAAD,EAAeO,OAAf,EAAiC;AAClD,aAAOjB,cAAc,CAAE,UAASM,gBAAgB,CAACI,IAAD,CAAO,QAAlC,CAArB;AACD,KA9MgB;;AA+MjB4C,IAAAA,kBAAkB,CAChBb,YADgB,EAEhBC,KAFgB,EAGhBR,MAHgB,EAIhBqB,aAJgB,EAKhBC,cALgB,EAMhB;AACA,aAAOzD,SAAS,CACb,GAAE,KAAKE,SAAL,CAAe,KAAKM,SAAL,CAAemC,KAAf,EAAsBR,MAAtB,CAAf,CAA8C,OAAMO,YAAY,CAChEE,GADoD,CAChD/C,GAAG,IAAI,KAAK2C,MAAL,CAAY3C,GAAG,CAAC2C,MAAhB,EAAwB3C,GAAG,CAAC8C,KAA5B,EAAmC9C,GAAG,CAACsC,MAAvC,CADyC,EAEpDU,IAFoD,CAE/C,OAF+C,CAEtC,EAHH,CAAhB;AAKD,KA3NgB;;AA4NjBa,IAAAA,IAAI,CAAC5C,QAAD,EAAmB;AACrB,aAAOb,cAAc,CAAE,GAAEC,SAAS,CAACY,QAAD,CAAW,OAAxB,CAArB;AACD,KA9NgB;;AA+NjB6C,IAAAA,SAAS,CAAChD,IAAD,EAAeO,OAAf,EAAiC;AACxC,aAAOlB,SAAS,CAAE,GAAEO,gBAAgB,CAACI,IAAD,CAAO,OAA3B,CAAhB;AACD,KAjOgB;;AAkOjBiD,IAAAA,UAAU,CAAC9C,QAAD,EAAmB;AAC3B,aAAOb,cAAc,CAAE,GAAE,KAAKC,SAAL,CAAeY,QAAf,CAAyB,aAA7B,CAArB;AACD,KApOgB;;AAqOjB+C,IAAAA,wBAAwB,CAACC,QAAD,EAAmBC,WAAnB,EAAyC;AAC/D,aAAO9D,cAAc,CAAE,GAAE6D,QAAS,aAAb,CAArB;AACD,KAvOgB;;AAwOjBE,IAAAA,kBAAkB,CAACF,QAAD,EAAmBC,WAAnB,EAAyC;AACzD,aAAO9D,cAAc,CAAE,GAAE6D,QAAS,OAAb,CAArB;AACD,KA1OgB;;AA2OjBG,IAAAA,WAAW,CAACtD,IAAD,EAAeO,OAAf,EAAiC;AAC1C,aAAOlB,SAAS,CAAE,UAASO,gBAAgB,CAACI,IAAD,CAAO,EAAlC,CAAhB;AACD,KA7OgB;;AA8OjBuD,IAAAA,eAAe,CAACvD,IAAD,EAAeO,OAAf,EAAiC;AAC9C,aAAOjB,cAAc,CAAE,UAASM,gBAAgB,CAACI,IAAD,CAAO,QAAlC,CAArB;AACD,KAhPgB;;AAiPjBwD,IAAAA,iBAAiB,CAACxD,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOjB,cAAc,CAAE,UAASM,gBAAgB,CAACI,IAAD,CAAO,UAAlC,CAArB;AACD,KAnPgB;;AAoPjByD,IAAAA,iBAAiB,CAACzD,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOjB,cAAc,CAAE,UAASM,gBAAgB,CAACI,IAAD,CAAO,UAAlC,CAArB;AACD,KAtPgB;;AAuPjB0D,IAAAA,iBAAiB,CAAC1D,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOjB,cAAc,CAAE,UAASM,gBAAgB,CAACI,IAAD,CAAO,UAAlC,CAArB;AACD,KAzPgB;;AA0PjB,OAAGN;AA1Pc,GAAnB,CADwB,CAA1B;AA8PD,CA/QM;;;AAiRA,MAAMiE,iBAAiB,GAAGlE,YAAY,EAAtC","sourcesContent":["/* THIS ENTIRE FILE IS DEPRECATED. DO NOT USE THIS. DO NOT EDIT THIS. */\n// @flow\nimport {\n  upperCamelCase,\n  camelCase,\n  constantCase,\n  pluralize,\n  singularize,\n} from \"graphile-build\";\n\nimport { preventEmptyResult } from \"./plugins/PgBasicsPlugin\";\n\nconst outputMessages = [];\n\n// eslint-disable-next-line flowtype/no-weak-types\nfunction deprecate(fn: (...input: Array<any>) => string, message: string) {\n  if (typeof fn !== \"function\") {\n    return fn;\n  }\n  return function (...args) {\n    if (outputMessages.indexOf(message) === -1) {\n      outputMessages.push(message);\n      // eslint-disable-next-line no-console\n      console.warn(new Error(message));\n    }\n    return fn.apply(this, args);\n  };\n}\n\nfunction deprecateEverything(obj: {\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n}) {\n  return Object.keys(obj).reduce((memo, key) => {\n    memo[key] = deprecate(\n      obj[key],\n      `Something (probably a plugin) called the old inflection system (inflector: '${key}'). This system has been deprecated since 4.0.0-beta.6 (4th May 2018) and is not used internally so using it may cause inconsistencies, instead please use the plugin-capable inflection system https://www.graphile.org/postgraphile/inflection/`\n    );\n    return memo;\n  }, {});\n}\n\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\ntype InflectorUtils = {|\n  constantCase: string => string,\n  camelCase: string => string,\n  upperCamelCase: string => string,\n  pluralize: string => string,\n  singularize: string => string,\n|};\n\nexport const defaultUtils: InflectorUtils = {\n  constantCase,\n  camelCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n};\n\nexport type Inflector = {\n  // TODO: tighten this up!\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n};\n\nexport const newInflector = (\n  overrides: ?{ [string]: () => string } = undefined,\n  {\n    constantCase,\n    camelCase,\n    upperCamelCase,\n    pluralize,\n    singularize,\n  }: InflectorUtils = defaultUtils\n): Inflector => {\n  function singularizeTable(tableName: string): string {\n    return singularize(tableName).replace(\n      /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n      \"$&_record\"\n    );\n  }\n\n  return deprecateEverything(\n    preventEmptyResult({\n      pluralize,\n      argument(name: ?string, index: number) {\n        return camelCase(name || `arg${index}`);\n      },\n      orderByType(typeName: string) {\n        return upperCamelCase(`${pluralize(typeName)}-order-by`);\n      },\n      orderByEnum(\n        name: string,\n        ascending: boolean,\n        _table: string,\n        _schema: ?string\n      ) {\n        return constantCase(`${name}_${ascending ? \"asc\" : \"desc\"}`);\n      },\n      domainType(name: string) {\n        return upperCamelCase(name);\n      },\n      enumName(inValue: string) {\n        let value = inValue;\n\n        if (value === \"\") {\n          return \"_EMPTY_\";\n        }\n\n        // Some enums use asterisks to signify wildcards - this might be for\n        // the whole item, or prefixes/suffixes, or even in the middle.  This\n        // is provided on a best efforts basis, if it doesn't suit your\n        // purposes then please pass a custom inflector as mentioned below.\n        value = value\n          .replace(/\\*/g, \"_ASTERISK_\")\n          .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n          .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n        // This is a best efforts replacement for common symbols that you\n        // might find in enums. Generally we only support enums that are\n        // alphanumeric, if these replacements don't work for you, you should\n        // pass a custom inflector that replaces this `enumName` method\n        // with one of your own chosing.\n        value =\n          {\n            // SQL comparison operators\n            \">\": \"GREATER_THAN\",\n            \">=\": \"GREATER_THAN_OR_EQUAL\",\n            \"=\": \"EQUAL\",\n            \"!=\": \"NOT_EQUAL\",\n            \"<>\": \"DIFFERENT\",\n            \"<=\": \"LESS_THAN_OR_EQUAL\",\n            \"<\": \"LESS_THAN\",\n\n            // PostgreSQL LIKE shortcuts\n            \"~~\": \"LIKE\",\n            \"~~*\": \"ILIKE\",\n            \"!~~\": \"NOT_LIKE\",\n            \"!~~*\": \"NOT_ILIKE\",\n\n            // '~' doesn't necessarily represent regexps, but the three\n            // operators following it likely do, so we'll use the word TILDE\n            // in all for consistency.\n            \"~\": \"TILDE\",\n            \"~*\": \"TILDE_ASTERISK\",\n            \"!~\": \"NOT_TILDE\",\n            \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n            // A number of other symbols where we're not sure of their\n            // meaning.  We give them common generic names so that they're\n            // suitable for multiple purposes, e.g. favouring 'PLUS' over\n            // 'ADDITION' and 'DOT' over 'FULL_STOP'\n            \"%\": \"PERCENT\",\n            \"+\": \"PLUS\",\n            \"-\": \"MINUS\",\n            \"/\": \"SLASH\",\n            \"\\\\\": \"BACKSLASH\",\n            _: \"UNDERSCORE\",\n            \"#\": \"POUND\",\n            \"£\": \"STERLING\",\n            $: \"DOLLAR\",\n            \"&\": \"AMPERSAND\",\n            \"@\": \"AT\",\n            \"'\": \"APOSTROPHE\",\n            '\"': \"QUOTE\",\n            \"`\": \"BACKTICK\",\n            \":\": \"COLON\",\n            \";\": \"SEMICOLON\",\n            \"!\": \"EXCLAMATION_POINT\",\n            \"?\": \"QUESTION_MARK\",\n            \",\": \"COMMA\",\n            \".\": \"DOT\",\n            \"^\": \"CARET\",\n            \"|\": \"BAR\",\n            \"[\": \"OPEN_BRACKET\",\n            \"]\": \"CLOSE_BRACKET\",\n            \"(\": \"OPEN_PARENTHESIS\",\n            \")\": \"CLOSE_PARENTHESIS\",\n            \"{\": \"OPEN_BRACE\",\n            \"}\": \"CLOSE_BRACE\",\n          }[value] || value;\n        return value;\n      },\n      enumType(name: string) {\n        return upperCamelCase(name);\n      },\n      conditionType(typeName: string) {\n        return upperCamelCase(`${typeName}-condition`);\n      },\n      inputType(typeName: string) {\n        return upperCamelCase(`${typeName}-input`);\n      },\n      rangeBoundType(typeName: string) {\n        return upperCamelCase(`${typeName}-range-bound`);\n      },\n      rangeType(typeName: string) {\n        return upperCamelCase(`${typeName}-range`);\n      },\n      patchType(typeName: string) {\n        return upperCamelCase(`${typeName}-patch`);\n      },\n      patchField(itemName: string) {\n        return camelCase(`${itemName}-patch`);\n      },\n      tableName(name: string, _schema: ?string) {\n        return camelCase(singularizeTable(name));\n      },\n      tableNode(name: string, _schema: ?string) {\n        return camelCase(singularizeTable(name));\n      },\n      allRows(name: string, schema: ?string) {\n        return camelCase(`all-${this.pluralize(this.tableName(name, schema))}`);\n      },\n      functionName(name: string, _schema: ?string) {\n        return camelCase(name);\n      },\n      functionPayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`${name}-payload`);\n      },\n      functionInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`${name}-input`);\n      },\n      tableType(name: string, schema: ?string) {\n        return upperCamelCase(this.tableName(name, schema));\n      },\n      column(name: string, _table: string, _schema: ?string) {\n        return camelCase(name);\n      },\n      singleRelationByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      rowByUniqueKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      updateByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `update-${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      deleteByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `delete-${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      updateNode(name: string, _schema: ?string) {\n        return camelCase(`update-${singularizeTable(name)}`);\n      },\n      deleteNode(name: string, _schema: ?string) {\n        return camelCase(`delete-${singularizeTable(name)}`);\n      },\n      updateByKeysInputType(\n        detailedKeys: Keys,\n        name: string,\n        _schema: ?string\n      ) {\n        return upperCamelCase(\n          `update-${singularizeTable(name)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}-input`\n        );\n      },\n      deleteByKeysInputType(\n        detailedKeys: Keys,\n        name: string,\n        _schema: ?string\n      ) {\n        return upperCamelCase(\n          `delete-${singularizeTable(name)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}-input`\n        );\n      },\n      updateNodeInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`update-${singularizeTable(name)}-input`);\n      },\n      deleteNodeInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`delete-${singularizeTable(name)}-input`);\n      },\n      manyRelationByKeys(\n        detailedKeys: Keys,\n        table: string,\n        schema: ?string,\n        _foreignTable: string,\n        _foreignSchema: ?string\n      ) {\n        return camelCase(\n          `${this.pluralize(this.tableName(table, schema))}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      edge(typeName: string) {\n        return upperCamelCase(`${pluralize(typeName)}-edge`);\n      },\n      edgeField(name: string, _schema: ?string) {\n        return camelCase(`${singularizeTable(name)}-edge`);\n      },\n      connection(typeName: string) {\n        return upperCamelCase(`${this.pluralize(typeName)}-connection`);\n      },\n      scalarFunctionConnection(procName: string, _procSchema: ?string) {\n        return upperCamelCase(`${procName}-connection`);\n      },\n      scalarFunctionEdge(procName: string, _procSchema: ?string) {\n        return upperCamelCase(`${procName}-edge`);\n      },\n      createField(name: string, _schema: ?string) {\n        return camelCase(`create-${singularizeTable(name)}`);\n      },\n      createInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`create-${singularizeTable(name)}-input`);\n      },\n      createPayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`create-${singularizeTable(name)}-payload`);\n      },\n      updatePayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`update-${singularizeTable(name)}-payload`);\n      },\n      deletePayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`delete-${singularizeTable(name)}-payload`);\n      },\n      ...overrides,\n    })\n  );\n};\n\nexport const defaultInflection = newInflector();\n"],"file":"inflections.js"}