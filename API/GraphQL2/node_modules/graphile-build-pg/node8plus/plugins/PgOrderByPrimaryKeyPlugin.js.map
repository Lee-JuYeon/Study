{"version":3,"sources":["../../src/plugins/PgOrderByPrimaryKeyPlugin.js"],"names":["PgOrderByPrimaryKeyPlugin","builder","hook","values","build","context","extend","inflection","scope","isPgRowSortEnum","pgIntrospection","table","kind","primaryKeyConstraint","primaryKeys","keyAttributes","builtin","value","alias","specs","map","key","name","unique"],"mappings":";;;;;;;IAGyBA,yB,GAAT,SAASA,yBAAT,CAAmCC,OAAnC,EAA4C;AAC1DA,EAAAA,OAAO,CAACC,IAAR,CACE,wBADF,EAEE,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AAC1B,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAyBH,KAA/B;AACA,UAAM;AACJI,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA,eAAe,EAAEC;AAApC;AADH,QAEFN,OAFJ;;AAIA,QAAI,CAACI,eAAD,IAAoB,CAACE,KAArB,IAA8BA,KAAK,CAACC,IAAN,KAAe,OAAjD,EAA0D;AACxD,aAAOT,MAAP;AACD;;AACD,UAAMU,oBAAoB,GAAGF,KAAK,CAACE,oBAAnC;;AACA,QAAI,CAACA,oBAAL,EAA2B;AACzB,aAAOV,MAAP;AACD;;AACD,UAAMW,WAAW,GAAGD,oBAAoB,CAACE,aAAzC;AAEA,WAAOT,MAAM,CACXH,MADW,EAEX;AACE,OAACI,UAAU,CAACS,OAAX,CAAmB,iBAAnB,CAAD,GAAyC;AACvCC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE,iBADF;AAELC,UAAAA,KAAK,EAAEL,WAAW,CAACM,GAAZ,CAAgBC,GAAG,IAAI,CAACA,GAAG,CAACC,IAAL,EAAW,IAAX,CAAvB,CAFF;AAGLC,UAAAA,MAAM,EAAE;AAHH;AADgC,OAD3C;AAQE,OAAChB,UAAU,CAACS,OAAX,CAAmB,kBAAnB,CAAD,GAA0C;AACxCC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE,kBADF;AAELC,UAAAA,KAAK,EAAEL,WAAW,CAACM,GAAZ,CAAgBC,GAAG,IAAI,CAACA,GAAG,CAACC,IAAL,EAAW,KAAX,CAAvB,CAFF;AAGLC,UAAAA,MAAM,EAAE;AAHH;AADiC;AAR5C,KAFW,EAkBV,8CAA6CZ,KAAK,CAACW,IAAK,GAlB9C,CAAb;AAoBD,GArCH,EAsCE,CAAC,qBAAD,CAtCF;AAwCD,C","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgOrderByPrimaryKeyPlugin(builder) {\n  builder.hook(\n    \"GraphQLEnumType:values\",\n    (values, build, context) => {\n      const { extend, inflection } = build;\n      const {\n        scope: { isPgRowSortEnum, pgIntrospection: table },\n      } = context;\n\n      if (!isPgRowSortEnum || !table || table.kind !== \"class\") {\n        return values;\n      }\n      const primaryKeyConstraint = table.primaryKeyConstraint;\n      if (!primaryKeyConstraint) {\n        return values;\n      }\n      const primaryKeys = primaryKeyConstraint.keyAttributes;\n\n      return extend(\n        values,\n        {\n          [inflection.builtin(\"PRIMARY_KEY_ASC\")]: {\n            value: {\n              alias: \"primary_key_asc\",\n              specs: primaryKeys.map(key => [key.name, true]),\n              unique: true,\n            },\n          },\n          [inflection.builtin(\"PRIMARY_KEY_DESC\")]: {\n            value: {\n              alias: \"primary_key_desc\",\n              specs: primaryKeys.map(key => [key.name, false]),\n              unique: true,\n            },\n          },\n        },\n        `Adding primary key asc/desc sort to table '${table.name}'`\n      );\n    },\n    [\"PgOrderByPrimaryKey\"]\n  );\n}: Plugin);\n"],"file":"PgOrderByPrimaryKeyPlugin.js"}