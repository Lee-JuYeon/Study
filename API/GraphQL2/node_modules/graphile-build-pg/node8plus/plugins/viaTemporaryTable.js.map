{"version":3,"sources":["../../src/plugins/viaTemporaryTable.js"],"names":["viaTemporaryTable","pgClient","sqlTypeIdentifier","sqlMutationQuery","sqlResultSourceAlias","sqlResultQuery","isPgClassLike","pgRecordInfo","undefined","isPgRecord","outputArgTypes","outputArgNames","performQuery","sqlQuery","text","values","sql","compile","debugSql","enabled","query","rows","selectionField","join","map","outputArgName","idx","identifier","result","firstNonNullRow","find","row","firstKey","Object","keys","rawValues","filter","rawValue","sqlValuesAlias","Symbol","convertFieldBack","value","literal","isFake","namespaceName","name","filteredValuesResults","length","finalRows","__isNull","shift"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as sql from \"pg-sql2\";\nimport type { Client } from \"pg\";\nimport type { SQL, SQLQuery } from \"pg-sql2\";\nimport debugSql from \"./debugSql\";\n\n/*\n * Originally we tried this with a CTE, but:\n *\n * > The sub-statements in WITH are executed concurrently with each other and\n * > with the main query. Therefore, when using data-modifying statements in\n * > WITH, the order in which the specified updates actually happen is\n * > unpredictable. All the statements are executed with the same snapshot (see\n * > Chapter 13), so they cannot \"see\" one another's effects on the target\n * > tables. This alleviates the effects of the unpredictability of the actual\n * > order of row updates, and means that RETURNING data is the only way to\n * > communicate changes between different WITH sub-statements and the main\n * > query.\n *\n * -- https://www.postgresql.org/docs/9.6/static/queries-with.html\n *\n * This caused issues with computed columns that themselves went off and\n * performed selects - because the data within those selects used the old\n * snapshot and thus returned stale data.\n *\n * To solve this, we tried using temporary tables to ensure the mutation and\n * the select execute in different statments. This worked, but temporary tables\n * require elevated priviliges and thus don't work everywhere. We needed a more\n * generic solution.\n *\n * In the end we settled for sending the data we received from the mutations\n * straight back into the PostgreSQL server. It's a bit wasteful but it works.\n *\n * If you can come up with a better solution please open a pull request!\n */\n\nexport default async function viaTemporaryTable(\n  pgClient: Client,\n  sqlTypeIdentifier: ?SQL,\n  sqlMutationQuery: SQL,\n  sqlResultSourceAlias: SQL,\n  sqlResultQuery: SQL,\n  isPgClassLike: boolean = true,\n  pgRecordInfo: ?{\n    // eslint-disable-next-line flowtype/no-weak-types\n    outputArgTypes: Array<any>,\n    outputArgNames: Array<string>,\n  } = undefined\n) {\n  const isPgRecord = pgRecordInfo != null;\n  const { outputArgTypes, outputArgNames } = pgRecordInfo || {};\n\n  async function performQuery(pgClient: Client, sqlQuery: SQLQuery) {\n    // TODO: look into rowMode = 'array'\n    const { text, values } = sql.compile(sqlQuery);\n    if (debugSql.enabled) debugSql(text);\n    return pgClient.query(text, values);\n  }\n\n  if (!sqlTypeIdentifier) {\n    // It returns void, just perform the query!\n    const { rows } = await performQuery(\n      pgClient,\n      sql.query`with ${sqlResultSourceAlias} as (${sqlMutationQuery}) ${sqlResultQuery}`\n    );\n    return rows;\n  } else {\n    /*\n     * In this code we're converting the rows to a string representation within\n     * PostgreSQL itself, then we can send it back into PostgreSQL and have it\n     * re-interpret the results cleanly (using it's own serializer/parser\n     * combination) so we should be fairly confident that it will work\n     * correctly every time assuming none of the PostgreSQL types are broken.\n     *\n     * If you have a way to improve this, I'd love to see a PR - but please\n     * make sure that the integration tests pass with your solution first as\n     * there are a log of potential pitfalls!\n     */\n    const selectionField = isPgClassLike\n      ? /*\n         * This `when foo is null then null` check might *seem* redundant, but it\n         * is not - e.g. the compound type `(,,,,,,,)::my_type` and\n         * `null::my_type` differ; however the former also returns true to `foo\n         * is null`. We use this check to coalesce both into the canonical `null`\n         * representation to make it easier to deal with below.\n         */\n        sql.query`(case when ${sqlResultSourceAlias} is null then null else ${sqlResultSourceAlias} end)`\n      : isPgRecord\n      ? sql.query`array[${sql.join(\n          outputArgNames.map(\n            (outputArgName, idx) =>\n              sql.query`${sqlResultSourceAlias}.${sql.identifier(\n                // According to https://www.postgresql.org/docs/10/static/sql-createfunction.html,\n                // \"If you omit the name for an output argument, the system will choose a default column name.\"\n                // In PG 9.x and 10, the column names appear to be assigned with a `column` prefix.\n                outputArgName !== \"\" ? outputArgName : `column${idx + 1}`\n              )}::text`\n          ),\n          \" ,\"\n        )}]`\n      : sql.query`(${sqlResultSourceAlias}.${sqlResultSourceAlias})::${sqlTypeIdentifier}`;\n    const result = await performQuery(\n      pgClient,\n      sql.query`with ${sqlResultSourceAlias} as (${sqlMutationQuery}) select (${selectionField})::text from ${sqlResultSourceAlias}`\n    );\n    const { rows } = result;\n    const firstNonNullRow = rows.find(row => row !== null);\n    // TODO: we should be able to have `pg` not interpret the results as\n    // objects and instead just return them as arrays - then we can just do\n    // `row[0]`. PR welcome!\n    const firstKey = firstNonNullRow && Object.keys(firstNonNullRow)[0];\n    const rawValues = rows.map(row => row && row[firstKey]);\n    const values = rawValues.filter(rawValue => rawValue !== null);\n    const sqlValuesAlias = sql.identifier(Symbol());\n    const convertFieldBack = isPgClassLike\n      ? sql.query`\\\nselect (str::${sqlTypeIdentifier}).*\nfrom unnest((${sql.value(values)})::text[]) str`\n      : isPgRecord\n      ? sql.query`\\\nselect ${sql.join(\n          outputArgNames.map(\n            (outputArgName, idx) =>\n              sql.query`(${sqlValuesAlias}.output_value_list)[${sql.literal(\n                idx + 1\n              )}]::${\n                outputArgTypes[idx].isFake\n                  ? sql.identifier(\"unknown\")\n                  : sql.identifier(\n                      outputArgTypes[idx].namespaceName,\n                      outputArgTypes[idx].name\n                    )\n              } as ${sql.identifier(\n                // According to https://www.postgresql.org/docs/10/static/sql-createfunction.html,\n                // \"If you omit the name for an output argument, the system will choose a default column name.\"\n                // In PG 9.x and 10, the column names appear to be assigned with a `column` prefix.\n                outputArgName !== \"\" ? outputArgName : `column${idx + 1}`\n              )}`\n          ),\n          \", \"\n        )}\nfrom (values ${sql.join(\n          values.map(value => sql.query`(${sql.value(value)}::text[])`),\n          \", \"\n        )}) as ${sqlValuesAlias}(output_value_list)`\n      : sql.query`\\\nselect str::${sqlTypeIdentifier} as ${sqlResultSourceAlias}\nfrom unnest((${sql.value(values)})::text[]) str`;\n    const { rows: filteredValuesResults } =\n      values.length > 0\n        ? await performQuery(\n            pgClient,\n            sql.query`with ${sqlResultSourceAlias} as (${convertFieldBack}) ${sqlResultQuery}`\n          )\n        : { rows: [] };\n    const finalRows = rawValues.map(rawValue =>\n      /*\n       * We can't simply return 'null' here because this is expected to have\n       * come from PG, and that would never return 'null' for a row - only\n       * the fields within said row. Using `__isNull` here is a simple\n       * workaround to this, that's caught by `pg2gql`.\n       */\n      rawValue === null ? { __isNull: true } : filteredValuesResults.shift()\n    );\n    return finalRows;\n  }\n}\n"],"file":"viaTemporaryTable.js"}