{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["PgAllRows","builder","pgViewUniqueKey","pgSimpleCollections","subscriptions","hook","fields","build","context","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","graphql","GraphQLList","GraphQLNonNull","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","pgPrepareAndRun","fieldWithHooks","scope","isRootQuery","class","reduce","memo","table","isSelectable","namespace","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","primaryKeyConstraint","primaryKeys","keyAttributes","isView","t","classKind","viewUniqueKey","tags","uniqueKey","uniqueIdAttribute","find","attr","undefined","namespaceName","schema","sqlFullTableName","identifier","makeField","isConnection","fieldName","allRows","allRowsSimple","getDataFromParsedResolveInfoFragment","description","wrapDescription","args","resolve","parent","resolveContext","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","returnType","checkerGenerator","query","useAsterisk","canUseAsterisk","withPaginationAsFields","queryBuilder","makeLiveCollection","_checkerGenerator","selectIdentifiers","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","rootValue","text","values","compile","debugSql","enabled","result","liveCollection","checker","rows","row","liveRecord","__identifiers","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","simpleCollections","hasConnections","hasSimpleCollections"],"mappings":"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","sourcesContent":["// @flow\n\nimport type { Plugin } from \"graphile-build\";\nimport debugSql from \"./debugSql\";\n\nexport default (async function PgAllRows(\n  builder,\n  { pgViewUniqueKey, pgSimpleCollections, subscriptions }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        parseResolveInfo,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        inflection,\n        graphql: { GraphQLList, GraphQLNonNull },\n        pgQueryFromResolveData: queryFromResolveData,\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit: omit,\n        pgPrepareAndRun,\n      } = build;\n      const {\n        fieldWithHooks,\n        scope: { isRootQuery },\n      } = context;\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class.reduce((memo, table) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!table.isSelectable) return memo;\n          if (!table.namespace) return memo;\n          if (omit(table, \"all\")) return memo;\n\n          const TableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableType) {\n            return memo;\n          }\n          const tableTypeName = TableType.name;\n          const ConnectionType = getTypeByName(\n            inflection.connection(TableType.name)\n          );\n          if (!TableType) {\n            throw new Error(\n              `Could not find GraphQL type for table '${table.name}'`\n            );\n          }\n          const attributes = table.attributes;\n          const primaryKeyConstraint = table.primaryKeyConstraint;\n          const primaryKeys =\n            primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n          const isView = t => t.classKind === \"v\";\n          const viewUniqueKey = table.tags.uniqueKey || pgViewUniqueKey;\n          const uniqueIdAttribute = viewUniqueKey\n            ? attributes.find(attr => attr.name === viewUniqueKey)\n            : undefined;\n          if (isView(table) && table.tags.uniqueKey && !uniqueIdAttribute) {\n            throw new Error(\n              `Could not find the named unique key '${table.tags.uniqueKey}' on view '${table.namespaceName}.${table.name}'`\n            );\n          }\n          if (!ConnectionType) {\n            throw new Error(\n              `Could not find GraphQL connection type for table '${table.name}'`\n            );\n          }\n          const schema = table.namespace;\n          const sqlFullTableName = sql.identifier(schema.name, table.name);\n          function makeField(isConnection) {\n            const fieldName = isConnection\n              ? inflection.allRows(table)\n              : inflection.allRowsSimple(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: build.wrapDescription(\n                    isConnection\n                      ? `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`\n                      : `Reads a set of \\`${tableTypeName}\\`.`,\n                    \"field\"\n                  ),\n                  type: isConnection\n                    ? ConnectionType\n                    : new GraphQLList(new GraphQLNonNull(TableType)),\n                  args: {},\n                  async resolve(parent, args, resolveContext, resolveInfo) {\n                    const { pgClient } = resolveContext;\n                    const parsedResolveInfoFragment =\n                      parseResolveInfo(resolveInfo);\n                    parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      resolveInfo.returnType\n                    );\n                    let checkerGenerator;\n                    const query = queryFromResolveData(\n                      sqlFullTableName,\n                      undefined,\n                      resolveData,\n                      {\n                        useAsterisk: table.canUseAsterisk,\n                        withPaginationAsFields: isConnection,\n                      },\n                      queryBuilder => {\n                        if (subscriptions) {\n                          queryBuilder.makeLiveCollection(\n                            table,\n                            _checkerGenerator => {\n                              checkerGenerator = _checkerGenerator;\n                            }\n                          );\n                        }\n                        if (primaryKeys) {\n                          if (subscriptions && !isConnection) {\n                            queryBuilder.selectIdentifiers(table);\n                          }\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              // Order by PK if no order specified\n                              queryBuilder.data.cursorPrefix = [\n                                \"primary_key_asc\",\n                              ];\n                              primaryKeys.forEach(key => {\n                                queryBuilder.orderBy(\n                                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )}`,\n                                  true\n                                );\n                              });\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        } else if (isView(table) && !!uniqueIdAttribute) {\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              queryBuilder.data.cursorPrefix = [\n                                \"view_unique_key_asc\",\n                              ];\n                              queryBuilder.orderBy(\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  uniqueIdAttribute.name\n                                )}`,\n                                true\n                              );\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        }\n                      },\n                      resolveContext,\n                      resolveInfo.rootValue\n                    );\n                    const { text, values } = sql.compile(query);\n                    if (debugSql.enabled) debugSql(text);\n                    const result = await pgPrepareAndRun(\n                      pgClient,\n                      text,\n                      values\n                    );\n\n                    const liveCollection =\n                      resolveInfo.rootValue &&\n                      resolveInfo.rootValue.liveCollection;\n                    if (subscriptions && liveCollection && checkerGenerator) {\n                      const checker = checkerGenerator();\n                      liveCollection(\"pg\", table, checker);\n                    }\n\n                    if (isConnection) {\n                      const {\n                        rows: [row],\n                      } = result;\n                      return addStartEndCursor(row);\n                    } else {\n                      const liveRecord =\n                        resolveInfo.rootValue &&\n                        resolveInfo.rootValue.liveRecord;\n                      if (\n                        subscriptions &&\n                        !isConnection &&\n                        primaryKeys &&\n                        liveRecord\n                      ) {\n                        result.rows.forEach(\n                          row =>\n                            row && liveRecord(\"pg\", table, row.__identifiers)\n                        );\n                      }\n                      return result.rows;\n                    }\n                  },\n                };\n              },\n              {\n                isPgFieldConnection: isConnection,\n                isPgFieldSimpleCollection: !isConnection,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          const simpleCollections =\n            table.tags.simpleCollections || pgSimpleCollections;\n          const hasConnections = simpleCollections !== \"only\";\n          const hasSimpleCollections =\n            simpleCollections === \"only\" || simpleCollections === \"both\";\n          if (TableType && ConnectionType && hasConnections) {\n            makeField(true);\n          }\n          if (TableType && hasSimpleCollections) {\n            makeField(false);\n          }\n          return memo;\n        }, {}),\n        `Adding 'all*' relations to root Query`\n      );\n    },\n    [\"PgAllRows\"],\n    [],\n    [\"PgTables\"]\n  );\n}: Plugin);\n"],"file":"PgAllRows.js"}