{"version":3,"sources":["../../src/plugins/PgJWTPlugin.js"],"names":["PgJWTPlugin","builder","pgJwtTypeIdentifier","pgJwtSecret","pgJwtSignOptions","hook","_","build","newWithHooks","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","pgRegisterGqlTypeByTypeId","pg2GqlMapper","pgTweaksByTypeId","pgTweakFragmentForTypeAndModifier","graphql","GraphQLScalarType","inflection","pgParseIdentifier","parseIdentifier","describePgEntity","Error","namespaceName","entityName","typeName","compositeClass","class","find","table","isSelectable","isInsertable","isUpdatable","isDeletable","name","compositeType","type","id","attributes","compositeTypeName","tableType","cb","JWTType","description","wrapDescription","serialize","value","token","reduce","memo","attr","parseFloat","undefined","Object","assign","aud","audience","iss","issuer","exp","expiresIn","__origin","isPgJwtType","map","values","some","v","unmap","fragment","join","literal","identifier","typeModifier"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport { sign as signJwt } from \"jsonwebtoken\";\n\nexport default (function PgJWTPlugin(\n  builder,\n  { pgJwtTypeIdentifier, pgJwtSecret, pgJwtSignOptions }\n) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgRegisterGqlTypeByTypeId,\n        pg2GqlMapper,\n        pgTweaksByTypeId,\n        pgTweakFragmentForTypeAndModifier,\n        graphql: { GraphQLScalarType },\n        inflection,\n        pgParseIdentifier: parseIdentifier,\n        describePgEntity,\n      } = build;\n\n      if (!pgJwtTypeIdentifier) {\n        return _;\n      }\n      if (!pgJwtSecret) {\n        throw new Error(\n          \"pgJwtTypeIdentifier was specified without pgJwtSecret\"\n        );\n      }\n      const { namespaceName, entityName: typeName } =\n        parseIdentifier(pgJwtTypeIdentifier);\n\n      const compositeClass = introspectionResultsByKind.class.find(\n        table =>\n          !table.isSelectable &&\n          !table.isInsertable &&\n          !table.isUpdatable &&\n          !table.isDeletable &&\n          table.name === typeName &&\n          table.namespaceName === namespaceName\n      );\n      if (!compositeClass) {\n        throw new Error(\n          `Could not find JWT type '\"${namespaceName}\".\"${typeName}\"'`\n        );\n      }\n      const compositeType = compositeClass.type;\n      if (!compositeType) {\n        throw new Error(\"Could not determine the type for JWT type\");\n      }\n      if (pg2GqlMapper[compositeType.id]) {\n        throw new Error(\"JWT type has already been overridden?\");\n      }\n      const attributes = compositeClass.attributes;\n\n      const compositeTypeName = inflection.tableType(compositeClass);\n\n      // NOTE: we deliberately do not create an input type\n      pgRegisterGqlTypeByTypeId(compositeType.id, cb => {\n        const JWTType = newWithHooks(\n          GraphQLScalarType,\n          {\n            name: compositeTypeName,\n            description: build.wrapDescription(\n              \"A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519) which securely represents claims between two parties.\",\n              \"type\"\n            ),\n            serialize(value) {\n              const token = attributes.reduce((memo, attr) => {\n                if (attr.name === \"exp\") {\n                  memo[attr.name] = value[attr.name]\n                    ? parseFloat(value[attr.name])\n                    : undefined;\n                } else {\n                  memo[attr.name] = value[attr.name];\n                }\n                return memo;\n              }, {});\n              return signJwt(\n                token,\n                pgJwtSecret,\n                Object.assign(\n                  {},\n                  pgJwtSignOptions,\n                  token.aud || (pgJwtSignOptions && pgJwtSignOptions.audience)\n                    ? null\n                    : {\n                        audience: \"postgraphile\",\n                      },\n                  token.iss || (pgJwtSignOptions && pgJwtSignOptions.issuer)\n                    ? null\n                    : {\n                        issuer: \"postgraphile\",\n                      },\n                  token.exp || (pgJwtSignOptions && pgJwtSignOptions.expiresIn)\n                    ? null\n                    : {\n                        expiresIn: \"1 day\",\n                      }\n                )\n              );\n            },\n          },\n          {\n            __origin: `Adding JWT type based on ${describePgEntity(\n              compositeType\n            )}`,\n            isPgJwtType: true,\n          }\n        );\n        cb(JWTType);\n\n        pg2GqlMapper[compositeType.id] = {\n          map: value => {\n            if (!value) return null;\n            const values = Object.values(value);\n            if (values.some(v => v != null)) {\n              return value;\n            }\n            return null;\n          },\n          unmap: () => {\n            throw new Error(\n              \"We don't support passing a JWT token into GraphQL currently\"\n            );\n          },\n        };\n\n        pgTweaksByTypeId[compositeType.id] = fragment =>\n          sql.fragment`json_build_object(${sql.join(\n            compositeClass.attributes.map(\n              attr =>\n                sql.fragment`${sql.literal(\n                  attr.name\n                )}::text, ${pgTweakFragmentForTypeAndModifier(\n                  sql.fragment`(${fragment}).${sql.identifier(attr.name)}`,\n                  attr.type,\n                  attr.typeModifier,\n                  {}\n                )}`\n            ),\n            \", \"\n          )})`;\n      });\n      return _;\n    },\n    [\"PgJWT\"],\n    [],\n    [\"PgIntrospection\"]\n  );\n}: Plugin);\n"],"file":"PgJWTPlugin.js"}