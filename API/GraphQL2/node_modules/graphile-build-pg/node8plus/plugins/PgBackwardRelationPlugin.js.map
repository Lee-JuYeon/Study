{"version":3,"sources":["../../src/plugins/PgBackwardRelationPlugin.js"],"names":["debug","OMIT","DEPRECATED","ONLY","PgBackwardRelationPlugin","builder","pgLegacyRelations","pgSimpleCollections","subscriptions","legacyRelationMode","only","deprecated","hook","fields","build","context","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","graphql","GraphQLNonNull","GraphQLList","inflection","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","sqlCommentByAddingTags","describePgEntity","scope","isPgRowType","pgIntrospection","foreignTable","fieldWithHooks","Self","kind","foreignKeyConstraints","foreignConstraints","filter","con","type","foreignTableTypeName","tableType","gqlForeignTableType","id","reduce","memo","constraint","table","classById","classId","Error","name","isSelectable","tableTypeName","gqlTableType","schema","namespace","keys","keyAttributes","foreignKeys","foreignKeyAttributes","every","_","some","key","isUnique","constraints","find","c","keyAttributeNums","length","n","i","num","isDeprecated","singleRelationFieldName","singleRelationByKeysBackwards","primaryKeyConstraint","primaryKeys","shouldAddSingleRelation","shouldAddManyRelation","getDataFromParsedResolveInfoFragment","addDataGenerator","sqlFrom","identifier","parsedResolveInfoFragment","pgQuery","queryBuilder","select","resolveData","tableAlias","Symbol","foreignTableAlias","getTableAlias","query","useAsterisk","asJson","addNullCase","withPagination","innerQueryBuilder","parentQueryBuilder","selectIdentifiers","makeLiveCollection","addLiveCondition","data","record","fragment","forEach","where","rootValue","alias","description","tags","backwardDescription","wrapDescription","args","resolve","_args","resolveContext","resolveInfo","safeAlias","liveRecord","liveCollection","liveConditions","__live","__id","rest","condition","checker","__identifiers","pgFieldIntrospection","isPgBackwardSingleRelationField","foreignSingleFieldName","makeFields","isConnection","manyRelationFieldName","manyRelationByKeys","manyRelationByKeysSimple","queryOptions","canUseAsterisk","withPaginationAsFields","asJsonAggregate","ConnectionType","TableType","beforeLock","isOrderUnique","cursorPrefix","orderBy","setOrderIsUnique","connection","records","r","deprecationReason","isPgFieldConnection","isPgFieldSimpleCollection","isPgBackwardRelationField","simpleCollections","hasConnections","hasSimpleCollections"],"mappings":"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","sourcesContent":["// @flow\nimport debugFactory from \"debug\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nconst OMIT = 0;\nconst DEPRECATED = 1;\nconst ONLY = 2;\n\nexport default (function PgBackwardRelationPlugin(\n  builder,\n  { pgLegacyRelations, pgSimpleCollections, subscriptions }\n) {\n  const legacyRelationMode =\n    {\n      only: ONLY,\n      deprecated: DEPRECATED,\n    }[pgLegacyRelations] || OMIT;\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        getSafeAliasFromResolveInfo,\n        getSafeAliasFromAlias,\n        graphql: { GraphQLNonNull, GraphQLList },\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit: omit,\n        sqlCommentByAddingTags,\n        describePgEntity,\n      } = build;\n      const {\n        scope: { isPgRowType, pgIntrospection: foreignTable },\n        fieldWithHooks,\n        Self,\n      } = context;\n      if (!isPgRowType || !foreignTable || foreignTable.kind !== \"class\") {\n        return fields;\n      }\n      // This is a relation in which WE are foreign\n      const foreignKeyConstraints = foreignTable.foreignConstraints.filter(\n        con => con.type === \"f\"\n      );\n      const foreignTableTypeName = inflection.tableType(foreignTable);\n      const gqlForeignTableType = pgGetGqlTypeByTypeIdAndModifier(\n        foreignTable.type.id,\n        null\n      );\n      if (!gqlForeignTableType) {\n        debug(\n          `Could not determine type for foreign table with id ${foreignTable.type.id}`\n        );\n        return fields;\n      }\n\n      return extend(\n        fields,\n        foreignKeyConstraints.reduce((memo, constraint) => {\n          if (omit(constraint, \"read\")) {\n            return memo;\n          }\n          const table =\n            introspectionResultsByKind.classById[constraint.classId];\n          if (!table) {\n            throw new Error(\n              `Could not find the table that referenced us (constraint: ${constraint.name})`\n            );\n          }\n          if (!table.isSelectable) {\n            // Could be a composite type\n            return memo;\n          }\n          const tableTypeName = inflection.tableType(table);\n          const gqlTableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!gqlTableType) {\n            debug(\n              `Could not determine type for table with id ${constraint.classId}`\n            );\n            return memo;\n          }\n          const schema = table.namespace;\n\n          const keys = constraint.keyAttributes;\n          const foreignKeys = constraint.foreignKeyAttributes;\n          if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n            throw new Error(\"Could not find key columns!\");\n          }\n          if (keys.some(key => omit(key, \"read\"))) {\n            return memo;\n          }\n          if (foreignKeys.some(key => omit(key, \"read\"))) {\n            return memo;\n          }\n          const isUnique = !!table.constraints.find(\n            c =>\n              (c.type === \"p\" || c.type === \"u\") &&\n              c.keyAttributeNums.length === keys.length &&\n              c.keyAttributeNums.every((n, i) => keys[i].num === n)\n          );\n\n          const isDeprecated = isUnique && legacyRelationMode === DEPRECATED;\n\n          const singleRelationFieldName = isUnique\n            ? inflection.singleRelationByKeysBackwards(\n                keys,\n                table,\n                foreignTable,\n                constraint\n              )\n            : null;\n\n          const primaryKeyConstraint = table.primaryKeyConstraint;\n          const primaryKeys =\n            primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n\n          const shouldAddSingleRelation =\n            isUnique && legacyRelationMode !== ONLY;\n\n          const shouldAddManyRelation =\n            !isUnique ||\n            legacyRelationMode === DEPRECATED ||\n            legacyRelationMode === ONLY;\n\n          if (\n            shouldAddSingleRelation &&\n            !omit(table, \"read\") &&\n            singleRelationFieldName\n          ) {\n            memo = extend(\n              memo,\n              {\n                [singleRelationFieldName]: fieldWithHooks(\n                  singleRelationFieldName,\n                  ({\n                    getDataFromParsedResolveInfoFragment,\n                    addDataGenerator,\n                  }) => {\n                    const sqlFrom = sql.identifier(schema.name, table.name);\n                    addDataGenerator(parsedResolveInfoFragment => {\n                      return {\n                        pgQuery: queryBuilder => {\n                          queryBuilder.select(() => {\n                            const resolveData =\n                              getDataFromParsedResolveInfoFragment(\n                                parsedResolveInfoFragment,\n                                gqlTableType\n                              );\n                            const tableAlias = sql.identifier(Symbol());\n                            const foreignTableAlias =\n                              queryBuilder.getTableAlias();\n                            const query = queryFromResolveData(\n                              sqlFrom,\n                              tableAlias,\n                              resolveData,\n                              {\n                                useAsterisk: false, // Because it's only a single relation, no need\n                                asJson: true,\n                                addNullCase: true,\n                                withPagination: false,\n                              },\n                              innerQueryBuilder => {\n                                innerQueryBuilder.parentQueryBuilder =\n                                  queryBuilder;\n                                if (\n                                  subscriptions &&\n                                  table.primaryKeyConstraint\n                                ) {\n                                  innerQueryBuilder.selectIdentifiers(table);\n                                  innerQueryBuilder.makeLiveCollection(table);\n                                  innerQueryBuilder.addLiveCondition(\n                                    data => record => {\n                                      return keys.every(\n                                        key =>\n                                          record[key.name] === data[key.name]\n                                      );\n                                    },\n                                    keys.reduce((memo, key, i) => {\n                                      memo[\n                                        key.name\n                                      ] = sql.fragment`${foreignTableAlias}.${sql.identifier(\n                                        foreignKeys[i].name\n                                      )}`;\n                                      return memo;\n                                    }, {})\n                                  );\n                                }\n                                keys.forEach((key, i) => {\n                                  innerQueryBuilder.where(\n                                    sql.fragment`${tableAlias}.${sql.identifier(\n                                      key.name\n                                    )} = ${foreignTableAlias}.${sql.identifier(\n                                      foreignKeys[i].name\n                                    )}`\n                                  );\n                                });\n                              },\n                              queryBuilder.context,\n                              queryBuilder.rootValue\n                            );\n                            return sql.fragment`(${query})`;\n                          }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n                        },\n                      };\n                    });\n                    return {\n                      description:\n                        constraint.tags.backwardDescription ||\n                        build.wrapDescription(\n                          `Reads a single \\`${tableTypeName}\\` that is related to this \\`${foreignTableTypeName}\\`.`,\n                          \"field\"\n                        ),\n                      type: gqlTableType,\n                      args: {},\n                      resolve: (data, _args, resolveContext, resolveInfo) => {\n                        const safeAlias =\n                          getSafeAliasFromResolveInfo(resolveInfo);\n                        const record = data[safeAlias];\n                        const liveRecord =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveRecord;\n                        const liveCollection =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveCollection;\n                        const liveConditions =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveConditions;\n                        if (\n                          subscriptions &&\n                          liveCollection &&\n                          liveConditions &&\n                          data.__live\n                        ) {\n                          const { __id, ...rest } = data.__live;\n                          const condition = liveConditions[__id];\n                          const checker = condition(rest);\n\n                          liveCollection(\"pg\", table, checker);\n                        }\n                        if (record && liveRecord) {\n                          liveRecord(\"pg\", table, record.__identifiers);\n                        }\n                        return record;\n                      },\n                    };\n                  },\n                  {\n                    pgFieldIntrospection: table,\n                    isPgBackwardSingleRelationField: true,\n                  }\n                ),\n              },\n              `Backward relation (single) for ${describePgEntity(\n                constraint\n              )}. To rename this relation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                constraint,\n                {\n                  foreignSingleFieldName: \"newNameHere\",\n                }\n              )}`\n            );\n          }\n          function makeFields(isConnection) {\n            const manyRelationFieldName = isConnection\n              ? inflection.manyRelationByKeys(\n                  keys,\n                  table,\n                  foreignTable,\n                  constraint\n                )\n              : inflection.manyRelationByKeysSimple(\n                  keys,\n                  table,\n                  foreignTable,\n                  constraint\n                );\n\n            memo = extend(\n              memo,\n              {\n                [manyRelationFieldName]: fieldWithHooks(\n                  manyRelationFieldName,\n                  ({\n                    getDataFromParsedResolveInfoFragment,\n                    addDataGenerator,\n                  }) => {\n                    const sqlFrom = sql.identifier(schema.name, table.name);\n                    const queryOptions = {\n                      useAsterisk: table.canUseAsterisk,\n                      withPagination: isConnection,\n                      withPaginationAsFields: false,\n                      asJsonAggregate: !isConnection,\n                    };\n                    addDataGenerator(parsedResolveInfoFragment => {\n                      return {\n                        pgQuery: queryBuilder => {\n                          queryBuilder.select(() => {\n                            const resolveData =\n                              getDataFromParsedResolveInfoFragment(\n                                parsedResolveInfoFragment,\n                                isConnection ? ConnectionType : TableType\n                              );\n                            const tableAlias = sql.identifier(Symbol());\n                            const foreignTableAlias =\n                              queryBuilder.getTableAlias();\n                            const query = queryFromResolveData(\n                              sqlFrom,\n                              tableAlias,\n                              resolveData,\n                              queryOptions,\n                              innerQueryBuilder => {\n                                innerQueryBuilder.parentQueryBuilder =\n                                  queryBuilder;\n                                if (subscriptions) {\n                                  innerQueryBuilder.makeLiveCollection(table);\n                                  innerQueryBuilder.addLiveCondition(\n                                    data => record => {\n                                      return keys.every(\n                                        key =>\n                                          record[key.name] === data[key.name]\n                                      );\n                                    },\n                                    keys.reduce((memo, key, i) => {\n                                      memo[\n                                        key.name\n                                      ] = sql.fragment`${foreignTableAlias}.${sql.identifier(\n                                        foreignKeys[i].name\n                                      )}`;\n                                      return memo;\n                                    }, {})\n                                  );\n                                }\n                                if (primaryKeys) {\n                                  if (\n                                    subscriptions &&\n                                    !isConnection &&\n                                    table.primaryKeyConstraint\n                                  ) {\n                                    innerQueryBuilder.selectIdentifiers(table);\n                                  }\n                                  innerQueryBuilder.beforeLock(\n                                    \"orderBy\",\n                                    () => {\n                                      // append order by primary key to the list of orders\n                                      if (\n                                        !innerQueryBuilder.isOrderUnique(false)\n                                      ) {\n                                        innerQueryBuilder.data.cursorPrefix = [\n                                          \"primary_key_asc\",\n                                        ];\n                                        primaryKeys.forEach(key => {\n                                          innerQueryBuilder.orderBy(\n                                            sql.fragment`${innerQueryBuilder.getTableAlias()}.${sql.identifier(\n                                              key.name\n                                            )}`,\n                                            true\n                                          );\n                                        });\n                                        innerQueryBuilder.setOrderIsUnique();\n                                      }\n                                    }\n                                  );\n                                }\n\n                                keys.forEach((key, i) => {\n                                  innerQueryBuilder.where(\n                                    sql.fragment`${tableAlias}.${sql.identifier(\n                                      key.name\n                                    )} = ${foreignTableAlias}.${sql.identifier(\n                                      foreignKeys[i].name\n                                    )}`\n                                  );\n                                });\n                              },\n                              queryBuilder.context,\n                              queryBuilder.rootValue\n                            );\n                            return sql.fragment`(${query})`;\n                          }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n                        },\n                      };\n                    });\n                    const ConnectionType = getTypeByName(\n                      inflection.connection(gqlTableType.name)\n                    );\n                    const TableType = pgGetGqlTypeByTypeIdAndModifier(\n                      table.type.id,\n                      null\n                    );\n                    return {\n                      description:\n                        constraint.tags.backwardDescription ||\n                        build.wrapDescription(\n                          `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`,\n                          \"field\"\n                        ),\n                      type: isConnection\n                        ? new GraphQLNonNull(ConnectionType)\n                        : new GraphQLNonNull(\n                            new GraphQLList(new GraphQLNonNull(TableType))\n                          ),\n                      args: {},\n                      resolve: (data, _args, resolveContext, resolveInfo) => {\n                        const safeAlias =\n                          getSafeAliasFromResolveInfo(resolveInfo);\n                        const liveCollection =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveCollection;\n                        const liveConditions =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveConditions;\n                        if (\n                          subscriptions &&\n                          liveCollection &&\n                          liveConditions &&\n                          data.__live\n                        ) {\n                          const { __id, ...rest } = data.__live;\n                          const condition = liveConditions[__id];\n                          const checker = condition(rest);\n\n                          liveCollection(\"pg\", table, checker);\n                        }\n                        if (isConnection) {\n                          return addStartEndCursor(data[safeAlias]);\n                        } else {\n                          const records = data[safeAlias];\n                          const liveRecord =\n                            resolveInfo.rootValue &&\n                            resolveInfo.rootValue.liveRecord;\n                          if (primaryKeys && subscriptions && liveRecord) {\n                            records.forEach(\n                              r =>\n                                r &&\n                                r.__identifiers &&\n                                liveRecord(\"pg\", table, r.__identifiers)\n                            );\n                          }\n                          return records;\n                        }\n                      },\n                      ...(isDeprecated\n                        ? {\n                            deprecationReason: singleRelationFieldName\n                              ? `Please use ${singleRelationFieldName} instead`\n                              : `Please use singular instead`, // This should never happen\n                          }\n                        : null),\n                    };\n                  },\n                  {\n                    isPgFieldConnection: isConnection,\n                    isPgFieldSimpleCollection: !isConnection,\n                    isPgBackwardRelationField: true,\n                    pgFieldIntrospection: table,\n                  }\n                ),\n              },\n\n              `Backward relation (${\n                isConnection ? \"connection\" : \"simple collection\"\n              }) for ${describePgEntity(\n                constraint\n              )}. To rename this relation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                constraint,\n                {\n                  [isConnection\n                    ? \"foreignFieldName\"\n                    : \"foreignSimpleFieldName\"]: \"newNameHere\",\n                }\n              )}`\n            );\n          }\n          if (\n            shouldAddManyRelation &&\n            !omit(table, \"many\") &&\n            !omit(constraint, \"many\")\n          ) {\n            const simpleCollections =\n              constraint.tags.simpleCollections ||\n              table.tags.simpleCollections ||\n              pgSimpleCollections;\n            const hasConnections = simpleCollections !== \"only\";\n            const hasSimpleCollections =\n              simpleCollections === \"only\" || simpleCollections === \"both\";\n            if (hasConnections) {\n              makeFields(true);\n            }\n            if (\n              hasSimpleCollections &&\n              !isUnique // if unique, use the singular instead\n            ) {\n              makeFields(false);\n            }\n          }\n          return memo;\n        }, {}),\n        `Adding backward relations for ${Self.name}`\n      );\n    },\n    [\"PgBackwardRelation\"]\n  );\n}: Plugin);\n"],"file":"PgBackwardRelationPlugin.js"}