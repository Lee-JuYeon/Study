{"version":3,"sources":["../../src/plugins/PgMutationCreatePlugin.js"],"names":["debug","PgMutationCreatePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","extend","newWithHooks","parseResolveInfo","pgIntrospectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","pgSql","sql","gql2pg","graphql","GraphQLObjectType","GraphQLInputObjectType","GraphQLNonNull","GraphQLString","pgColumnFilter","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","pgField","scope","isRootMutation","fieldWithHooks","class","reduce","memo","table","namespace","isSelectable","isInsertable","Table","type","id","name","TableInput","tableTypeName","tableType","InputType","createInputType","description","wrapDescription","clientMutationId","tableFieldName","__origin","isPgCreateInputType","pgInflection","pgIntrospection","PayloadType","createPayloadType","tableName","isPgCreatePayloadResultField","pgFieldIntrospection","isMutationPayload","isPgCreatePayloadType","fieldName","createField","getDataFromParsedResolveInfoFragment","relevantAttributes","attributes","filter","attr","args","input","resolve","data","resolveContext","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","insertedRowAlias","identifier","Symbol","query","rootValue","sqlColumns","sqlValues","inputData","forEach","column","val","Object","prototype","hasOwnProperty","call","push","typeModifier","mutationQuery","length","fragment","join","row","rows","e","isPgCreateMutationField"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgMutationCreatePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        newWithHooks,\n        parseResolveInfo,\n        pgIntrospectionResultsByKind,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgGetGqlInputTypeByTypeIdAndModifier,\n        pgSql: sql,\n        gql2pg,\n        graphql: {\n          GraphQLObjectType,\n          GraphQLInputObjectType,\n          GraphQLNonNull,\n          GraphQLString,\n        },\n        pgColumnFilter,\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgOmit: omit,\n        pgViaTemporaryTable: viaTemporaryTable,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgField,\n      } = build;\n      const {\n        scope: { isRootMutation },\n        fieldWithHooks,\n      } = context;\n\n      if (!isRootMutation) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        pgIntrospectionResultsByKind.class.reduce((memo, table) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!table.namespace) return memo;\n          if (!table.isSelectable) return memo;\n          if (!table.isInsertable || omit(table, \"create\")) return memo;\n\n          const Table = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n          if (!Table) {\n            debug(\n              `There was no table type for table '${table.namespace.name}.${table.name}', so we're not generating a create mutation for it.`\n            );\n            return memo;\n          }\n          const TableInput = pgGetGqlInputTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableInput) {\n            debug(\n              `There was no input type for table '${table.namespace.name}.${table.name}', so we're going to omit it from the create mutation.`\n            );\n          }\n          const tableTypeName = inflection.tableType(table);\n          const InputType = newWithHooks(\n            GraphQLInputObjectType,\n            {\n              name: inflection.createInputType(table),\n              description: build.wrapDescription(\n                `All input for the create \\`${tableTypeName}\\` mutation.`,\n                \"type\"\n              ),\n              fields: {\n                clientMutationId: {\n                  description: build.wrapDescription(\n                    \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                    \"field\"\n                  ),\n                  type: GraphQLString,\n                },\n                ...(TableInput\n                  ? {\n                      [inflection.tableFieldName(table)]: {\n                        description: build.wrapDescription(\n                          `The \\`${tableTypeName}\\` to be created by this mutation.`,\n                          \"field\"\n                        ),\n                        type: new GraphQLNonNull(TableInput),\n                      },\n                    }\n                  : null),\n              },\n            },\n            {\n              __origin: `Adding table create input type for ${describePgEntity(\n                table\n              )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`,\n              isPgCreateInputType: true,\n              pgInflection: table, // TODO:v5: remove - TYPO!\n              pgIntrospection: table,\n            }\n          );\n          const PayloadType = newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.createPayloadType(table),\n              description: build.wrapDescription(\n                `The output of our create \\`${tableTypeName}\\` mutation.`,\n                \"type\"\n              ),\n              fields: ({ fieldWithHooks }) => {\n                const tableName = inflection.tableFieldName(table);\n                return {\n                  clientMutationId: {\n                    description: build.wrapDescription(\n                      \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                      \"field\"\n                    ),\n                    type: GraphQLString,\n                  },\n                  [tableName]: pgField(\n                    build,\n                    fieldWithHooks,\n                    tableName,\n                    {\n                      description: build.wrapDescription(\n                        `The \\`${tableTypeName}\\` that was created by this mutation.`,\n                        \"field\"\n                      ),\n                      type: Table,\n                    },\n                    {\n                      isPgCreatePayloadResultField: true,\n                      pgFieldIntrospection: table,\n                    }\n                  ),\n                };\n              },\n            },\n            {\n              __origin: `Adding table create payload type for ${describePgEntity(\n                table\n              )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                {\n                  name: \"newNameHere\",\n                }\n              )}\\n\\nor disable the built-in create mutation via:\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                { omit: \"create\" }\n              )}`,\n              isMutationPayload: true,\n              isPgCreatePayloadType: true,\n              pgIntrospection: table,\n            }\n          );\n          const fieldName = inflection.createField(table);\n          memo = build.extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                context => {\n                  const { getDataFromParsedResolveInfoFragment } = context;\n                  const relevantAttributes = table.attributes.filter(\n                    attr =>\n                      pgColumnFilter(attr, build, context) &&\n                      !omit(attr, \"create\")\n                  );\n                  return {\n                    description: build.wrapDescription(\n                      `Creates a single \\`${tableTypeName}\\`.`,\n                      \"field\"\n                    ),\n                    type: PayloadType,\n                    args: {\n                      input: {\n                        type: new GraphQLNonNull(InputType),\n                      },\n                    },\n                    async resolve(data, args, resolveContext, resolveInfo) {\n                      const { input } = args;\n                      const { pgClient } = resolveContext;\n                      const parsedResolveInfoFragment =\n                        parseResolveInfo(resolveInfo);\n                      parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        PayloadType\n                      );\n                      const insertedRowAlias = sql.identifier(Symbol());\n                      const query = queryFromResolveData(\n                        insertedRowAlias,\n                        insertedRowAlias,\n                        resolveData,\n                        {},\n                        null,\n                        resolveContext,\n                        resolveInfo.rootValue\n                      );\n                      const sqlColumns = [];\n                      const sqlValues = [];\n                      const inputData = input[inflection.tableFieldName(table)];\n                      relevantAttributes.forEach(attr => {\n                        const fieldName = inflection.column(attr);\n                        const val = inputData[fieldName];\n                        if (\n                          Object.prototype.hasOwnProperty.call(\n                            inputData,\n                            fieldName\n                          )\n                        ) {\n                          sqlColumns.push(sql.identifier(attr.name));\n                          sqlValues.push(\n                            gql2pg(val, attr.type, attr.typeModifier)\n                          );\n                        }\n                      });\n\n                      const mutationQuery = sql.query`\\\ninsert into ${sql.identifier(table.namespace.name, table.name)} ${\n                        sqlColumns.length\n                          ? sql.fragment`(${sql.join(\n                              sqlColumns,\n                              \", \"\n                            )}) values(${sql.join(sqlValues, \", \")})`\n                          : sql.fragment`default values`\n                      } returning *`;\n\n                      let row;\n                      try {\n                        await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                        const rows = await viaTemporaryTable(\n                          pgClient,\n                          sql.identifier(table.namespace.name, table.name),\n                          mutationQuery,\n                          insertedRowAlias,\n                          query\n                        );\n                        row = rows[0];\n                        await pgClient.query(\n                          \"RELEASE SAVEPOINT graphql_mutation\"\n                        );\n                      } catch (e) {\n                        await pgClient.query(\n                          \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                        );\n                        throw e;\n                      }\n                      return {\n                        clientMutationId: input.clientMutationId,\n                        data: row,\n                      };\n                    },\n                  };\n                },\n                {\n                  pgFieldIntrospection: table,\n                  isPgCreateMutationField: true,\n                }\n              ),\n            },\n            `Adding create mutation for ${describePgEntity(\n              table\n            )}. You can omit this default mutation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                omit: \"create\",\n              }\n            )}`\n          );\n          return memo;\n        }, {}),\n        `Adding default 'create' mutation to root mutation`\n      );\n    },\n    [\"PgMutationCreate\"],\n    [],\n    [\"PgTables\"]\n  );\n}: Plugin);\n"],"file":"PgMutationCreatePlugin.js"}