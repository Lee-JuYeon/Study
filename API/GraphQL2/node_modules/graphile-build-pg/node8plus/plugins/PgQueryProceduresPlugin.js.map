{"version":3,"sources":["../../src/plugins/PgQueryProceduresPlugin.js"],"names":["PgQueryProceduresPlugin","builder","pgSimpleCollections","disableIssue641Fix","hook","fields","build","context","extend","inflection","pgIntrospectionResultsByKind","introspectionResultsByKind","pgMakeProcField","makeProcField","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","swallowError","scope","isRootQuery","fieldWithHooks","procedure","reduce","memo","proc","isStable","namespace","argTypes","argTypeIds","prev","typeId","idx","argModes","length","push","typeById","some","type","class","isSelectable","firstArgType","namespaceId","name","startsWith","makeField","forceList","fieldName","functionQueryNameList","functionQueryName","e","simpleCollections","tags","hasConnections","hasSimpleCollections","returnsSet"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgQueryProceduresPlugin(\n  builder,\n  { pgSimpleCollections, disableIssue641Fix = false }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        inflection,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgMakeProcField: makeProcField,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        swallowError,\n      } = build;\n      const {\n        scope: { isRootQuery },\n        fieldWithHooks,\n      } = context;\n\n      if (!isRootQuery) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        introspectionResultsByKind.procedure.reduce((memo, proc) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!proc.isStable) return memo;\n          if (!proc.namespace) return memo;\n          if (omit(proc, \"execute\")) return memo;\n\n          const argTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n            if (\n              proc.argModes.length === 0 || // all args are `in`\n              proc.argModes[idx] === \"i\" || // this arg is `in`\n              proc.argModes[idx] === \"b\" // this arg is `inout`\n            ) {\n              prev.push(introspectionResultsByKind.typeById[typeId]);\n            }\n            return prev;\n          }, []);\n          if (\n            argTypes.some(\n              type => type.type === \"c\" && type.class && type.class.isSelectable\n            )\n          ) {\n            // Selects a table, ignore!\n            return memo;\n          }\n          const firstArgType = argTypes[0];\n          if (\n            firstArgType &&\n            firstArgType.type === \"c\" &&\n            firstArgType.class &&\n            firstArgType.namespaceId === proc.namespaceId &&\n            proc.name.startsWith(`${firstArgType.name}_`)\n          ) {\n            // It's a computed field, skip\n            return memo;\n          }\n\n          function makeField(forceList) {\n            const fieldName = forceList\n              ? inflection.functionQueryNameList(proc)\n              : inflection.functionQueryName(proc);\n            try {\n              memo = extend(\n                memo,\n                {\n                  [fieldName]: makeProcField(fieldName, proc, build, {\n                    fieldWithHooks,\n                    forceList,\n                    isRootQuery: !disableIssue641Fix,\n                  }),\n                },\n                `Adding query field for ${describePgEntity(\n                  proc\n                )}. You can rename this field with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                  proc,\n                  {\n                    name: \"newNameHere\",\n                  }\n                )}`\n              );\n            } catch (e) {\n              swallowError(e);\n            }\n          }\n          const simpleCollections =\n            proc.tags.simpleCollections || pgSimpleCollections;\n          const hasConnections = simpleCollections !== \"only\";\n          const hasSimpleCollections =\n            simpleCollections === \"only\" || simpleCollections === \"both\";\n          if (!proc.returnsSet || hasConnections) {\n            makeField(false);\n          }\n          if (proc.returnsSet && hasSimpleCollections) {\n            makeField(true);\n          }\n          return memo;\n        }, {}),\n        `Adding query procedures to root Query type`\n      );\n    },\n    [\"PgQueryProcedures\"]\n  );\n}: Plugin);\n"],"file":"PgQueryProceduresPlugin.js"}